{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/image/tendermint.png","path":"image/tendermint.png","modified":0,"renderable":0},{"_id":"source/image/note.jpeg","path":"image/note.jpeg","modified":0,"renderable":0},{"_id":"source/image/tendermintFlow.png","path":"image/tendermintFlow.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630552977735},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1630552977723},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1630552977726},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1630552977725},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1630552977726},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1630552977726},{"_id":"themes/yilia/_config.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1630552977727},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1630552977726},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1630552977727},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1630552977738},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1630552977727},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1630552977727},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1630552977770},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1630552977727},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1630552977728},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1630552977728},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1630552977728},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1630552977736},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1630552977737},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1630552977737},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1630552977737},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630552977737},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1630552977738},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630552977738},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630552977766},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1630552977739},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1630552977769},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1630552977728},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1630552977761},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1630552977728},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1630552977729},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1630552977729},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1630552977729},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1630552977729},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1630552977730},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1630552977731},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1630552977731},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1630552977736},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1630552977736},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630552977761},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630552977762},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630552977762},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630552977763},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630552977763},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630552977764},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630552977765},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630552977763},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630552977764},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1630552977740},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1630552977740},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1630552977742},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1630552977741},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1630552977742},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1630552977742},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1630552977743},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1630552977743},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1630552977743},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1630552977748},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1630552977745},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1630552977748},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1630552977749},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1630552977751},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1630552977751},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1630552977750},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1630552977751},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1630552977752},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1630552977751},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1630552977752},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1630552977753},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1630552977752},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1630552977754},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1630552977754},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1630552977756},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1630552977756},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1630552977758},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1630552977758},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1630552977759},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1630552977755},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1630552977755},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1630552977759},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1630552977759},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1630552977759},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1630552977760},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1630552977760},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1630552977760},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1630552977731},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1630552977760},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1630552977733},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1630552977732},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1630552977733},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1630552977734},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1630552977733},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1630552977734},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1630552977734},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1630552977734},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1630552977731},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1630552977744},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1630552977745},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1630552977743},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1630552977744},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1630552977744},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630552977746},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630552977747},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630552977746},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1630552977750},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630552977750},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630552977750},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630552977747},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1630552977754},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1630552977767},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1630552977768},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1630552977735},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1630552977726},{"_id":"source/_posts/BlockChain-Tendermint共识.md","hash":"d2a177d4c357af0b486ef8c147f09c589461aff6","modified":1630553802124},{"_id":"source/.DS_Store","hash":"acc656440760d5c26599163b2ca6fa1550228d25","modified":1631934033193},{"_id":"source/_posts/Algorithm-二分总结.md","hash":"1ab52eff985e277d62c01c513bc977d88d1a1223","modified":1631159569094},{"_id":"source/_posts/First-Article.md","hash":"532101c00dec9cea5e80dee5263b37c989f3d962","modified":1630553782663},{"_id":"source/_posts/Spring-Cors以及Filter和Interceptor.md","hash":"7ccca438f8f7f5504e5694a0829926b21cd1c10f","modified":1630553822019},{"_id":"source/image/note.jpeg","hash":"42048c74e98e3b05fc7885ce4c3c3c9904d3cdfc","modified":1630381255098},{"_id":"source/image/tendermint.png","hash":"1ca36d4b1a073ab83caff93c9e5fda1a93babdcd","modified":1630483099673},{"_id":"source/image/tendermintFlow.png","hash":"b7feef886fbd2624f26949ec55a58c714513bdce","modified":1630483843787},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1630373961819},{"_id":"public/content.json","hash":"7bfe8d684956233196ea83b11af6fe3486cb3f25","modified":1635381895460},{"_id":"public/2021/09/01/BlockChain-Tendermint共识/index.html","hash":"a87ce687e3bc965eb4cbd86dd9b05670daf961b3","modified":1635381895460},{"_id":"public/2021/09/01/Spring-Cors以及Filter和Interceptor/index.html","hash":"8f664de6ebaa06411d3aef828d1867ecec3c088d","modified":1635381895460},{"_id":"public/2021/09/01/Algorithm-二分总结/index.html","hash":"95d457ef61b098c093fabfe1da878bc9b7044d3b","modified":1635381895460},{"_id":"public/2021/08/31/First-Article/index.html","hash":"b550debee6faf613f347f1d407ea44a51e391422","modified":1635381895460},{"_id":"public/2021/08/31/hello-world/index.html","hash":"b395d8067bb2afc7deda145c5fc061235334baf6","modified":1635381895460},{"_id":"public/archives/index.html","hash":"5a80d4a531f5e17b349e9aba9d05d85d9ab23028","modified":1635381895460},{"_id":"public/archives/2021/index.html","hash":"9c4e8af23017ca6cdeef550d2843c377aab87577","modified":1635381895460},{"_id":"public/archives/2021/08/index.html","hash":"741275a79a01263aa8a158c6e690135f8f938d10","modified":1635381895460},{"_id":"public/archives/2021/09/index.html","hash":"d9d56abfc83563cab8f6989f7ba4758cab8e9d43","modified":1635381895460},{"_id":"public/index.html","hash":"4784d741735e77f0374b868794634d8fc6ee544f","modified":1635381895460},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630553635345},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630553635345},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630553635345},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630553635345},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630553635345},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630553635345},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630553635345},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630553635345},{"_id":"public/image/note.jpeg","hash":"42048c74e98e3b05fc7885ce4c3c3c9904d3cdfc","modified":1630553635345},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630553635345},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630553635345},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1630553635345},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1630553635345},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1630553635345},{"_id":"public/image/tendermint.png","hash":"1ca36d4b1a073ab83caff93c9e5fda1a93babdcd","modified":1630553635345},{"_id":"public/image/tendermintFlow.png","hash":"b7feef886fbd2624f26949ec55a58c714513bdce","modified":1630553635345},{"_id":"public/tags/Algorithm/index.html","hash":"796a4e6becac80d28186635bf3849f0ea07d067a","modified":1635381895460},{"_id":"public/tags/BlockChain/index.html","hash":"f69345026a3fb383715c2ce0ddc934c39eb0b963","modified":1635381895460},{"_id":"public/tags/学习方法/index.html","hash":"ca72611d699148bafa9c0b008ac914d813dba4c7","modified":1635381895460},{"_id":"public/tags/Spring/index.html","hash":"42750502915994ba2eec7cc5f45a6ae83c4eecc6","modified":1635381895460},{"_id":"source/_posts/BlockChain-BitCoin.md","hash":"f0a12fffb274bb3bd48f75493e79edd9eb5feb96","modified":1631934195306},{"_id":"source/_posts/grok-Instagram.md","hash":"e76f13db11a56afc4c0ae03cd51c5996c7816c7b","modified":1635302653337},{"_id":"source/_posts/SystemDesign-grok.md","hash":"5b00de85637fb41c8b4962113963b2c8fc90267b","modified":1635234762178},{"_id":"source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1631934653419},{"_id":"source/_posts/grok-TinyUrl.md","hash":"7d96974759fed62082c6eb48deaaba82ac7d3265","modified":1635211464272},{"_id":"source/_posts/grok-PasteBin.md","hash":"05518c346a0ef220d3e09aa406145327d77cb269","modified":1635234762178},{"_id":"source/_posts/计算机网络-1.md","hash":"5f5b6f98fec76af5e665ae39bd741106359d85a8","modified":1630569037815},{"_id":"source/_posts/Algorithm-位运算总结.md","hash":"2c26f463d55897af7fe1668fa7cb32b0f8eb8099","modified":1635234739396},{"_id":"public/2021/10/27/grok-Instagram/index.html","hash":"bae5d1770ae8c4f41a0fa02f97342fdb60431e1d","modified":1635381895460},{"_id":"public/2021/10/26/grok-PasteBin/index.html","hash":"696d4c9027aacd5d575f8c03aded0dc2dc6ef2bf","modified":1635381895460},{"_id":"public/2021/10/26/grok-TinyUrl/index.html","hash":"2ad9c105f3fb6bc3c6e651eb9b58491f91507190","modified":1635381895460},{"_id":"public/2021/09/27/Algorithm-位运算总结/index.html","hash":"4a95d358c146a24ff9e3458d695a202dd853a972","modified":1635381895460},{"_id":"public/2021/09/18/SystemDesign-grok/index.html","hash":"75638f4b614f4f55b7728b92c35c9b04cef805f6","modified":1635381895460},{"_id":"public/2021/09/18/BlockChain-BitCoin/index.html","hash":"0578be12c4b1e115077b22e59125dd4b59bcc469","modified":1635381895460},{"_id":"public/2021/09/02/计算机网络-1/index.html","hash":"f69714e201aa8cf11a762c99fec08996ccf5fb8c","modified":1635381895460},{"_id":"public/page/2/index.html","hash":"84f8104c95b00536e01864db8b9b640ecd3618aa","modified":1635381895460},{"_id":"public/archives/page/2/index.html","hash":"44f0111c2b81765ff7190b18d9d2f22853e00659","modified":1635381895460},{"_id":"public/archives/2021/page/2/index.html","hash":"936b3431c965f250c7804fb7221393bd97489acb","modified":1635381895460},{"_id":"public/archives/2021/10/index.html","hash":"eb6892aaa8f1a9c440e5b33aec01ec9dd8c3aff6","modified":1635381895460},{"_id":"public/tags/System-Design/index.html","hash":"c994cd0719dcfb8b4f63764a145ecf8a49f53da5","modified":1635381895460},{"_id":"public/tags/网络系统/index.html","hash":"bdd73d48d073d33379beff8fe54da2f20b181e8e","modified":1635381895460}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"#BlockChain Tendermint共识","date":"2021-09-01T06:29:56.000Z","_content":"# Tendermint \n\n一种拜占庭共识算法\n\n不同环境 安全 一致性 复用\n\nCore + ABCI， 是对共识层以下的一层封装\n\n![note image](https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg)\n\n---\n## 1. 核心模块\n### ABCI app\n- socket 链接\n- 实现ABCI 接口\n    - checkTX\n    - DeliverTX\n    - Commit\n- 能处理 ABCI message\n\n### Tendermint Core\n- 共识\n- P2P 网络层\n- RPC 区块链接口\n- 交易缓存，队列\n\n---\n\n\n## 1. 算法 - 阶段\n\n![note image](https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg)\n\nNewHeight\n- 进入到下一轮 共识\n- round robin 选择 proposer （voting power）\n\n**Propose**\n- 判定 有没有lock 的 block\n    - 没有 -> gossip 广播proposal\n    - 有 -> 直接propose locked block + proof of block\n\n**preVote**\n- LOCK 判定\n    - 有 就对lock的block投票\n    - 没有 就对当前轮\n- 同时收集 prevote 的投票 打包 进入 PoLC\n\n- 如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound < PoLC-Round < 当前 Round，则解锁 Lock-Block。 \n\n- 如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。\n在 Prevote 阶段不会锁住任何 block。\n\n**preCommit**\n- Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段\n\n- 如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round\n\n- 如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit\n- 收到 +2/3 投票进入 commit， 否则 下一轮 propose\n\nCommit\n- 节点必须收到该 block\n- 节点必须等待，直到收到 2/3 的 节点 commit 信息。\n\n---\n## Feature\n\n- propose + preVote + preCommit 称为Round\n- commit 前可能会经过多个round\n- PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合\n- 锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：\n    1. 该验证人必须在预提交的区块进行预投票。\n    2. 当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。\n\n---\n## 优势 bft-raft\n1. 同一个高度不会有多个快，不会分叉\n\n## 与PBFT\n1. 相同点：\n 1）同属BFT体系。\n 2）抗1/3拜占庭节点攻击。\n 3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。\n 4）两者都需要达到法定人数才能提交块。\n\n2. 不同点：\n    1. Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。\n\n    当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。\n    简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。\n\n    2. 另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。\n\n    3. 最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。\n\n\n[Reference详解](https://cloud.tencent.com/developer/article/1446865)\n\n\n\n","source":"_posts/BlockChain-Tendermint共识.md","raw":"---\ntitle: '#BlockChain Tendermint共识'\ndate: 2021-09-01 14:29:56\ntags:\n    - BlockChain\n---\n# Tendermint \n\n一种拜占庭共识算法\n\n不同环境 安全 一致性 复用\n\nCore + ABCI， 是对共识层以下的一层封装\n\n![note image](https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg)\n\n---\n## 1. 核心模块\n### ABCI app\n- socket 链接\n- 实现ABCI 接口\n    - checkTX\n    - DeliverTX\n    - Commit\n- 能处理 ABCI message\n\n### Tendermint Core\n- 共识\n- P2P 网络层\n- RPC 区块链接口\n- 交易缓存，队列\n\n---\n\n\n## 1. 算法 - 阶段\n\n![note image](https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg)\n\nNewHeight\n- 进入到下一轮 共识\n- round robin 选择 proposer （voting power）\n\n**Propose**\n- 判定 有没有lock 的 block\n    - 没有 -> gossip 广播proposal\n    - 有 -> 直接propose locked block + proof of block\n\n**preVote**\n- LOCK 判定\n    - 有 就对lock的block投票\n    - 没有 就对当前轮\n- 同时收集 prevote 的投票 打包 进入 PoLC\n\n- 如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound < PoLC-Round < 当前 Round，则解锁 Lock-Block。 \n\n- 如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。\n在 Prevote 阶段不会锁住任何 block。\n\n**preCommit**\n- Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段\n\n- 如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round\n\n- 如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit\n- 收到 +2/3 投票进入 commit， 否则 下一轮 propose\n\nCommit\n- 节点必须收到该 block\n- 节点必须等待，直到收到 2/3 的 节点 commit 信息。\n\n---\n## Feature\n\n- propose + preVote + preCommit 称为Round\n- commit 前可能会经过多个round\n- PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合\n- 锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：\n    1. 该验证人必须在预提交的区块进行预投票。\n    2. 当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。\n\n---\n## 优势 bft-raft\n1. 同一个高度不会有多个快，不会分叉\n\n## 与PBFT\n1. 相同点：\n 1）同属BFT体系。\n 2）抗1/3拜占庭节点攻击。\n 3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。\n 4）两者都需要达到法定人数才能提交块。\n\n2. 不同点：\n    1. Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。\n\n    当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。\n    简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。\n\n    2. 另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。\n\n    3. 最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。\n\n\n[Reference详解](https://cloud.tencent.com/developer/article/1446865)\n\n\n\n","slug":"BlockChain-Tendermint共识","published":1,"updated":"2021-09-02T03:36:42.124Z","_id":"ckt2dj9ts00007eh5cf813mjx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Tendermint\"><a href=\"#Tendermint\" class=\"headerlink\" title=\"Tendermint\"></a>Tendermint</h1><p>一种拜占庭共识算法</p>\n<p>不同环境 安全 一致性 复用</p>\n<p>Core + ABCI， 是对共识层以下的一层封装</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg\" alt=\"note image\"></p>\n<hr>\n<h2 id=\"1-核心模块\"><a href=\"#1-核心模块\" class=\"headerlink\" title=\"1. 核心模块\"></a>1. 核心模块</h2><h3 id=\"ABCI-app\"><a href=\"#ABCI-app\" class=\"headerlink\" title=\"ABCI app\"></a>ABCI app</h3><ul>\n<li>socket 链接</li>\n<li>实现ABCI 接口<ul>\n<li>checkTX</li>\n<li>DeliverTX</li>\n<li>Commit</li>\n</ul>\n</li>\n<li>能处理 ABCI message</li>\n</ul>\n<h3 id=\"Tendermint-Core\"><a href=\"#Tendermint-Core\" class=\"headerlink\" title=\"Tendermint Core\"></a>Tendermint Core</h3><ul>\n<li>共识</li>\n<li>P2P 网络层</li>\n<li>RPC 区块链接口</li>\n<li>交易缓存，队列</li>\n</ul>\n<hr>\n<h2 id=\"1-算法-阶段\"><a href=\"#1-算法-阶段\" class=\"headerlink\" title=\"1. 算法 - 阶段\"></a>1. 算法 - 阶段</h2><p><img src=\"https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg\" alt=\"note image\"></p>\n<p>NewHeight</p>\n<ul>\n<li>进入到下一轮 共识</li>\n<li>round robin 选择 proposer （voting power）</li>\n</ul>\n<p><strong>Propose</strong></p>\n<ul>\n<li>判定 有没有lock 的 block<ul>\n<li>没有 -&gt; gossip 广播proposal</li>\n<li>有 -&gt; 直接propose locked block + proof of block</li>\n</ul>\n</li>\n</ul>\n<p><strong>preVote</strong></p>\n<ul>\n<li><p>LOCK 判定</p>\n<ul>\n<li>有 就对lock的block投票</li>\n<li>没有 就对当前轮</li>\n</ul>\n</li>\n<li><p>同时收集 prevote 的投票 打包 进入 PoLC</p>\n</li>\n<li><p>如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound &lt; PoLC-Round &lt; 当前 Round，则解锁 Lock-Block。 </p>\n</li>\n<li><p>如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。<br>在 Prevote 阶段不会锁住任何 block。</p>\n</li>\n</ul>\n<p><strong>preCommit</strong></p>\n<ul>\n<li><p>Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段</p>\n</li>\n<li><p>如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round</p>\n</li>\n<li><p>如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit</p>\n</li>\n<li><p>收到 +2/3 投票进入 commit， 否则 下一轮 propose</p>\n</li>\n</ul>\n<p>Commit</p>\n<ul>\n<li>节点必须收到该 block</li>\n<li>节点必须等待，直到收到 2/3 的 节点 commit 信息。</li>\n</ul>\n<hr>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ul>\n<li>propose + preVote + preCommit 称为Round</li>\n<li>commit 前可能会经过多个round</li>\n<li>PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合</li>\n<li>锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：<ol>\n<li>该验证人必须在预提交的区块进行预投票。</li>\n<li>当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"优势-bft-raft\"><a href=\"#优势-bft-raft\" class=\"headerlink\" title=\"优势 bft-raft\"></a>优势 bft-raft</h2><ol>\n<li>同一个高度不会有多个快，不会分叉</li>\n</ol>\n<h2 id=\"与PBFT\"><a href=\"#与PBFT\" class=\"headerlink\" title=\"与PBFT\"></a>与PBFT</h2><ol>\n<li><p>相同点：<br>1）同属BFT体系。<br>2）抗1/3拜占庭节点攻击。<br>3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。<br>4）两者都需要达到法定人数才能提交块。</p>\n</li>\n<li><p>不同点：</p>\n<ol>\n<li>Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。</li>\n</ol>\n<p> 当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。<br> 简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。</p>\n<ol start=\"2\">\n<li><p>另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。</p>\n</li>\n<li><p>最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://cloud.tencent.com/developer/article/1446865\">Reference详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Tendermint\"><a href=\"#Tendermint\" class=\"headerlink\" title=\"Tendermint\"></a>Tendermint</h1><p>一种拜占庭共识算法</p>\n<p>不同环境 安全 一致性 复用</p>\n<p>Core + ABCI， 是对共识层以下的一层封装</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg\" alt=\"note image\"></p>\n<hr>\n<h2 id=\"1-核心模块\"><a href=\"#1-核心模块\" class=\"headerlink\" title=\"1. 核心模块\"></a>1. 核心模块</h2><h3 id=\"ABCI-app\"><a href=\"#ABCI-app\" class=\"headerlink\" title=\"ABCI app\"></a>ABCI app</h3><ul>\n<li>socket 链接</li>\n<li>实现ABCI 接口<ul>\n<li>checkTX</li>\n<li>DeliverTX</li>\n<li>Commit</li>\n</ul>\n</li>\n<li>能处理 ABCI message</li>\n</ul>\n<h3 id=\"Tendermint-Core\"><a href=\"#Tendermint-Core\" class=\"headerlink\" title=\"Tendermint Core\"></a>Tendermint Core</h3><ul>\n<li>共识</li>\n<li>P2P 网络层</li>\n<li>RPC 区块链接口</li>\n<li>交易缓存，队列</li>\n</ul>\n<hr>\n<h2 id=\"1-算法-阶段\"><a href=\"#1-算法-阶段\" class=\"headerlink\" title=\"1. 算法 - 阶段\"></a>1. 算法 - 阶段</h2><p><img src=\"https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg\" alt=\"note image\"></p>\n<p>NewHeight</p>\n<ul>\n<li>进入到下一轮 共识</li>\n<li>round robin 选择 proposer （voting power）</li>\n</ul>\n<p><strong>Propose</strong></p>\n<ul>\n<li>判定 有没有lock 的 block<ul>\n<li>没有 -&gt; gossip 广播proposal</li>\n<li>有 -&gt; 直接propose locked block + proof of block</li>\n</ul>\n</li>\n</ul>\n<p><strong>preVote</strong></p>\n<ul>\n<li><p>LOCK 判定</p>\n<ul>\n<li>有 就对lock的block投票</li>\n<li>没有 就对当前轮</li>\n</ul>\n</li>\n<li><p>同时收集 prevote 的投票 打包 进入 PoLC</p>\n</li>\n<li><p>如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound &lt; PoLC-Round &lt; 当前 Round，则解锁 Lock-Block。 </p>\n</li>\n<li><p>如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。<br>在 Prevote 阶段不会锁住任何 block。</p>\n</li>\n</ul>\n<p><strong>preCommit</strong></p>\n<ul>\n<li><p>Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段</p>\n</li>\n<li><p>如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round</p>\n</li>\n<li><p>如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit</p>\n</li>\n<li><p>收到 +2/3 投票进入 commit， 否则 下一轮 propose</p>\n</li>\n</ul>\n<p>Commit</p>\n<ul>\n<li>节点必须收到该 block</li>\n<li>节点必须等待，直到收到 2/3 的 节点 commit 信息。</li>\n</ul>\n<hr>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ul>\n<li>propose + preVote + preCommit 称为Round</li>\n<li>commit 前可能会经过多个round</li>\n<li>PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合</li>\n<li>锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：<ol>\n<li>该验证人必须在预提交的区块进行预投票。</li>\n<li>当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"优势-bft-raft\"><a href=\"#优势-bft-raft\" class=\"headerlink\" title=\"优势 bft-raft\"></a>优势 bft-raft</h2><ol>\n<li>同一个高度不会有多个快，不会分叉</li>\n</ol>\n<h2 id=\"与PBFT\"><a href=\"#与PBFT\" class=\"headerlink\" title=\"与PBFT\"></a>与PBFT</h2><ol>\n<li><p>相同点：<br>1）同属BFT体系。<br>2）抗1/3拜占庭节点攻击。<br>3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。<br>4）两者都需要达到法定人数才能提交块。</p>\n</li>\n<li><p>不同点：</p>\n<ol>\n<li>Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。</li>\n</ol>\n<p> 当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。<br> 简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。</p>\n<ol start=\"2\">\n<li><p>另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。</p>\n</li>\n<li><p>最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://cloud.tencent.com/developer/article/1446865\">Reference详解</a></p>\n"},{"title":"#Algorithm 二分总结","date":"2021-09-01T02:18:16.000Z","_content":"# 二分法\n\nbasic\n---\n左右边界，取中位数查看\n\n**防止溢出**：mid = l + (r - l) // 2\n\n```\nwhile L <= R:  # 在L > R时停止\n    if mid == target:\n        R = mid\n    if mid < target:\n        L = mid + 1 # 左边界收缩\n    else:\n        R = mid\n\n```\n\n### Corner case\n- 一个数值\n- 没有数值\n\n\n1. 搜索数值\n\n2. 寻找转折点\n\n3. 最小K个数 - quick sort方法\n\n","source":"_posts/Algorithm-二分总结.md","raw":"---\ntitle: '#Algorithm 二分总结'\ndate: 2021-09-01 10:18:16\ntags:\n    - Algorithm\n---\n# 二分法\n\nbasic\n---\n左右边界，取中位数查看\n\n**防止溢出**：mid = l + (r - l) // 2\n\n```\nwhile L <= R:  # 在L > R时停止\n    if mid == target:\n        R = mid\n    if mid < target:\n        L = mid + 1 # 左边界收缩\n    else:\n        R = mid\n\n```\n\n### Corner case\n- 一个数值\n- 没有数值\n\n\n1. 搜索数值\n\n2. 寻找转折点\n\n3. 最小K个数 - quick sort方法\n\n","slug":"Algorithm-二分总结","published":1,"updated":"2021-09-09T03:52:49.094Z","_id":"ckt2dj9u500017eh58w2n24oo","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h1><h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><p>左右边界，取中位数查看</p>\n<p><strong>防止溢出</strong>：mid = l + (r - l) // 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while L &lt;= R:  # 在L &gt; R时停止</span><br><span class=\"line\">    if mid == target:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\">    if mid &lt; target:</span><br><span class=\"line\">        L = mid + 1 # 左边界收缩</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Corner-case\"><a href=\"#Corner-case\" class=\"headerlink\" title=\"Corner case\"></a>Corner case</h3><ul>\n<li>一个数值</li>\n<li>没有数值</li>\n</ul>\n<ol>\n<li><p>搜索数值</p>\n</li>\n<li><p>寻找转折点</p>\n</li>\n<li><p>最小K个数 - quick sort方法</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h1><h2 id=\"basic\"><a href=\"#basic\" class=\"headerlink\" title=\"basic\"></a>basic</h2><p>左右边界，取中位数查看</p>\n<p><strong>防止溢出</strong>：mid = l + (r - l) // 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while L &lt;= R:  # 在L &gt; R时停止</span><br><span class=\"line\">    if mid == target:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\">    if mid &lt; target:</span><br><span class=\"line\">        L = mid + 1 # 左边界收缩</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Corner-case\"><a href=\"#Corner-case\" class=\"headerlink\" title=\"Corner case\"></a>Corner case</h3><ul>\n<li>一个数值</li>\n<li>没有数值</li>\n</ul>\n<ol>\n<li><p>搜索数值</p>\n</li>\n<li><p>寻找转折点</p>\n</li>\n<li><p>最小K个数 - quick sort方法</p>\n</li>\n</ol>\n"},{"title":"First Article","date":"2021-08-31T01:46:37.000Z","_content":"\n# 康奈尔笔记\n---\n\n- 记录 - 论据，概念，内容\n- 简化 - 概括 在 副栏\n- 背诵 - 记忆 关键词\n\n- 思考 - 提纲，摘要，归类，感想 - 单独记录\n- 复习 - 总结回顾\n---\n![note image](/image/note.jpeg)\n\n---\n\n\n\n\n","source":"_posts/First-Article.md","raw":"---\ntitle: First Article\ndate: 2021-08-31 09:46:37\ntags:\n    - 学习方法\n---\n\n# 康奈尔笔记\n---\n\n- 记录 - 论据，概念，内容\n- 简化 - 概括 在 副栏\n- 背诵 - 记忆 关键词\n\n- 思考 - 提纲，摘要，归类，感想 - 单独记录\n- 复习 - 总结回顾\n---\n![note image](/image/note.jpeg)\n\n---\n\n\n\n\n","slug":"First-Article","published":1,"updated":"2021-09-02T03:36:22.663Z","_id":"ckt2dj9u700027eh5a5769eda","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"康奈尔笔记\"><a href=\"#康奈尔笔记\" class=\"headerlink\" title=\"康奈尔笔记\"></a>康奈尔笔记</h1><hr>\n<ul>\n<li><p>记录 - 论据，概念，内容</p>\n</li>\n<li><p>简化 - 概括 在 副栏</p>\n</li>\n<li><p>背诵 - 记忆 关键词</p>\n</li>\n<li><p>思考 - 提纲，摘要，归类，感想 - 单独记录</p>\n</li>\n<li><p>复习 - 总结回顾</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/image/note.jpeg\" alt=\"note image\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"康奈尔笔记\"><a href=\"#康奈尔笔记\" class=\"headerlink\" title=\"康奈尔笔记\"></a>康奈尔笔记</h1><hr>\n<ul>\n<li><p>记录 - 论据，概念，内容</p>\n</li>\n<li><p>简化 - 概括 在 副栏</p>\n</li>\n<li><p>背诵 - 记忆 关键词</p>\n</li>\n<li><p>思考 - 提纲，摘要，归类，感想 - 单独记录</p>\n</li>\n<li><p>复习 - 总结回顾</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"/image/note.jpeg\" alt=\"note image\"></p>\n<hr>\n"},{"title":"#Spring Cors以及Filter和Interceptor","date":"2021-09-01T03:35:41.000Z","_content":"\n# Cors 在spring中配置方法\n\n## 1. @CrossOrigin 注解\n\n```java\n@RestController\nclass HelloController {\n    @GetMapping(\"hello\")\n    @CrossOrigin(origins = [\"http://localhost:8080\"]) #针对方法handler\n    fun hello(): String {\n        return \"Hello, CORS!\"\n    }\n}\n```\n\n## 2. 实现 WebMvcConfigurer.addCorsMappings 方法\n\n增加全局配置\n```java\n@Configuration\n@EnableWebMvc\nclass MvcConfig: WebMvcConfigurer {\n    override fun addCorsMappings(registry: CorsRegistry) {\n        registry.addMapping(\"/hello\")\n                .allowedOrigins(\"http://localhost:8080\")\n    }\n}\n```\n\n此种方法使用了CorsRegistry 和 CorsRegistration\n\n## 3. 注入 CorsFilter\n\n```java\n@Configuration\nclass CORSConfiguration {\n    @Bean\n    fun corsFilter(): CorsFilter {\n        val configuration = CorsConfiguration()\n        configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n        val source = UrlBasedCorsConfigurationSource()\n        source.registerCorsConfiguration(\"/hello\", configuration)\n        return CorsFilter(source)\n    }\n}\n```\n\n也可以实现FilterRegistrationBean\n```java\n@Bean\npublic FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter(){\n    FilterRegistrationBean<RequestResponseLoggingFilter> registrationBean \n      = new FilterRegistrationBean<>();\n        \n    registrationBean.setFilter(new RequestResponseLoggingFilter());\n    registrationBean.addUrlPatterns(\"/users/*\");\n        \n    return registrationBean;    \n}\n```\n\n## 4. Spring Security 中的配置\n\n引入 spring.security后，以上方式都会失效，需要增加配置\n\n```java\n@Configuration\nclass SecurityConfig : WebSecurityConfigurerAdapter() {\n    override fun configure(http: HttpSecurity?) {\n        http?.cors()\n    }\n}\n```\n\n或者与corsConfigurationSource配合\n\n```java\n@Bean\nfun corsConfigurationSource(): CorsConfigurationSource {\n    val configuration = CorsConfiguration()\n    configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n    val source = UrlBasedCorsConfigurationSource()\n    source.registerCorsConfiguration(\"/hello\", configuration)\n    return source\n}\n```\n\n\n# 区别 \n\n**handler ->\ninterceptor ->\nDispatch Servlet ->\nFilter ->\nWeb Container ->\nClient**\n---\n\n\n- 实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效\n\n- 注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效\n\n- 引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行\n\n- HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证\n\n- HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的\n\n- 在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应\n\n[Reference详解](https://segmentfault.com/a/1190000019485883)","source":"_posts/Spring-Cors以及Filter和Interceptor.md","raw":"---\ntitle: '#Spring Cors以及Filter和Interceptor'\ndate: 2021-09-01 11:35:41\ntags:\n    - Spring\n---\n\n# Cors 在spring中配置方法\n\n## 1. @CrossOrigin 注解\n\n```java\n@RestController\nclass HelloController {\n    @GetMapping(\"hello\")\n    @CrossOrigin(origins = [\"http://localhost:8080\"]) #针对方法handler\n    fun hello(): String {\n        return \"Hello, CORS!\"\n    }\n}\n```\n\n## 2. 实现 WebMvcConfigurer.addCorsMappings 方法\n\n增加全局配置\n```java\n@Configuration\n@EnableWebMvc\nclass MvcConfig: WebMvcConfigurer {\n    override fun addCorsMappings(registry: CorsRegistry) {\n        registry.addMapping(\"/hello\")\n                .allowedOrigins(\"http://localhost:8080\")\n    }\n}\n```\n\n此种方法使用了CorsRegistry 和 CorsRegistration\n\n## 3. 注入 CorsFilter\n\n```java\n@Configuration\nclass CORSConfiguration {\n    @Bean\n    fun corsFilter(): CorsFilter {\n        val configuration = CorsConfiguration()\n        configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n        val source = UrlBasedCorsConfigurationSource()\n        source.registerCorsConfiguration(\"/hello\", configuration)\n        return CorsFilter(source)\n    }\n}\n```\n\n也可以实现FilterRegistrationBean\n```java\n@Bean\npublic FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter(){\n    FilterRegistrationBean<RequestResponseLoggingFilter> registrationBean \n      = new FilterRegistrationBean<>();\n        \n    registrationBean.setFilter(new RequestResponseLoggingFilter());\n    registrationBean.addUrlPatterns(\"/users/*\");\n        \n    return registrationBean;    \n}\n```\n\n## 4. Spring Security 中的配置\n\n引入 spring.security后，以上方式都会失效，需要增加配置\n\n```java\n@Configuration\nclass SecurityConfig : WebSecurityConfigurerAdapter() {\n    override fun configure(http: HttpSecurity?) {\n        http?.cors()\n    }\n}\n```\n\n或者与corsConfigurationSource配合\n\n```java\n@Bean\nfun corsConfigurationSource(): CorsConfigurationSource {\n    val configuration = CorsConfiguration()\n    configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n    val source = UrlBasedCorsConfigurationSource()\n    source.registerCorsConfiguration(\"/hello\", configuration)\n    return source\n}\n```\n\n\n# 区别 \n\n**handler ->\ninterceptor ->\nDispatch Servlet ->\nFilter ->\nWeb Container ->\nClient**\n---\n\n\n- 实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效\n\n- 注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效\n\n- 引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行\n\n- HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证\n\n- HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的\n\n- 在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应\n\n[Reference详解](https://segmentfault.com/a/1190000019485883)","slug":"Spring-Cors以及Filter和Interceptor","published":1,"updated":"2021-09-02T03:37:02.019Z","_id":"ckt2dj9u800037eh53ag99td3","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Cors-在spring中配置方法\"><a href=\"#Cors-在spring中配置方法\" class=\"headerlink\" title=\"Cors 在spring中配置方法\"></a>Cors 在spring中配置方法</h1><h2 id=\"1-CrossOrigin-注解\"><a href=\"#1-CrossOrigin-注解\" class=\"headerlink\" title=\"1. @CrossOrigin 注解\"></a>1. @CrossOrigin 注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = [&quot;http://localhost:8080&quot;])</span> #针对方法<span class=\"function\">handler</span></span><br><span class=\"line\"><span class=\"function\">    fun <span class=\"title\">hello</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CORS!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-实现-WebMvcConfigurer-addCorsMappings-方法\"><a href=\"#2-实现-WebMvcConfigurer-addCorsMappings-方法\" class=\"headerlink\" title=\"2. 实现 WebMvcConfigurer.addCorsMappings 方法\"></a>2. 实现 WebMvcConfigurer.addCorsMappings 方法</h2><p>增加全局配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfig</span>: <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">addCorsMappings</span><span class=\"params\">(registry: CorsRegistry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此种方法使用了CorsRegistry 和 CorsRegistration</p>\n<h2 id=\"3-注入-CorsFilter\"><a href=\"#3-注入-CorsFilter\" class=\"headerlink\" title=\"3. 注入 CorsFilter\"></a>3. 注入 CorsFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CORSConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">corsFilter</span><span class=\"params\">()</span>: CorsFilter </span>&#123;</span><br><span class=\"line\">        val configuration = CorsConfiguration()</span><br><span class=\"line\">        configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">        val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CorsFilter(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以实现FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; <span class=\"title\">loggingFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; registrationBean </span><br><span class=\"line\">      = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> RequestResponseLoggingFilter());</span><br><span class=\"line\">    registrationBean.addUrlPatterns(<span class=\"string\">&quot;/users/*&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Spring-Security-中的配置\"><a href=\"#4-Spring-Security-中的配置\" class=\"headerlink\" title=\"4. Spring Security 中的配置\"></a>4. Spring Security 中的配置</h2><p>引入 spring.security后，以上方式都会失效，需要增加配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> : <span class=\"title\">WebSecurityConfigurerAdapter</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">configure</span><span class=\"params\">(http: HttpSecurity?)</span> </span>&#123;</span><br><span class=\"line\">        http?.cors()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者与corsConfigurationSource配合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">corsConfigurationSource</span><span class=\"params\">()</span>: CorsConfigurationSource </span>&#123;</span><br><span class=\"line\">    val configuration = CorsConfiguration()</span><br><span class=\"line\">    configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><strong>handler -&gt;<br>interceptor -&gt;<br>Dispatch Servlet -&gt;<br>Filter -&gt;<br>Web Container -&gt;<br>Client</strong></p>\n<hr>\n<ul>\n<li><p>实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效</p>\n</li>\n<li><p>注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效</p>\n</li>\n<li><p>引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行</p>\n</li>\n<li><p>HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证</p>\n</li>\n<li><p>HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的</p>\n</li>\n<li><p>在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应</p>\n</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000019485883\">Reference详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Cors-在spring中配置方法\"><a href=\"#Cors-在spring中配置方法\" class=\"headerlink\" title=\"Cors 在spring中配置方法\"></a>Cors 在spring中配置方法</h1><h2 id=\"1-CrossOrigin-注解\"><a href=\"#1-CrossOrigin-注解\" class=\"headerlink\" title=\"1. @CrossOrigin 注解\"></a>1. @CrossOrigin 注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = [&quot;http://localhost:8080&quot;])</span> #针对方法<span class=\"function\">handler</span></span><br><span class=\"line\"><span class=\"function\">    fun <span class=\"title\">hello</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CORS!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-实现-WebMvcConfigurer-addCorsMappings-方法\"><a href=\"#2-实现-WebMvcConfigurer-addCorsMappings-方法\" class=\"headerlink\" title=\"2. 实现 WebMvcConfigurer.addCorsMappings 方法\"></a>2. 实现 WebMvcConfigurer.addCorsMappings 方法</h2><p>增加全局配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfig</span>: <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">addCorsMappings</span><span class=\"params\">(registry: CorsRegistry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此种方法使用了CorsRegistry 和 CorsRegistration</p>\n<h2 id=\"3-注入-CorsFilter\"><a href=\"#3-注入-CorsFilter\" class=\"headerlink\" title=\"3. 注入 CorsFilter\"></a>3. 注入 CorsFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CORSConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">corsFilter</span><span class=\"params\">()</span>: CorsFilter </span>&#123;</span><br><span class=\"line\">        val configuration = CorsConfiguration()</span><br><span class=\"line\">        configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">        val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CorsFilter(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以实现FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; <span class=\"title\">loggingFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; registrationBean </span><br><span class=\"line\">      = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> RequestResponseLoggingFilter());</span><br><span class=\"line\">    registrationBean.addUrlPatterns(<span class=\"string\">&quot;/users/*&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Spring-Security-中的配置\"><a href=\"#4-Spring-Security-中的配置\" class=\"headerlink\" title=\"4. Spring Security 中的配置\"></a>4. Spring Security 中的配置</h2><p>引入 spring.security后，以上方式都会失效，需要增加配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> : <span class=\"title\">WebSecurityConfigurerAdapter</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">configure</span><span class=\"params\">(http: HttpSecurity?)</span> </span>&#123;</span><br><span class=\"line\">        http?.cors()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者与corsConfigurationSource配合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">corsConfigurationSource</span><span class=\"params\">()</span>: CorsConfigurationSource </span>&#123;</span><br><span class=\"line\">    val configuration = CorsConfiguration()</span><br><span class=\"line\">    configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><strong>handler -&gt;<br>interceptor -&gt;<br>Dispatch Servlet -&gt;<br>Filter -&gt;<br>Web Container -&gt;<br>Client</strong></p>\n<hr>\n<ul>\n<li><p>实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效</p>\n</li>\n<li><p>注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效</p>\n</li>\n<li><p>引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行</p>\n</li>\n<li><p>HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证</p>\n</li>\n<li><p>HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的</p>\n</li>\n<li><p>在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应</p>\n</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000019485883\">Reference详解</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-08-31T01:39:21.819Z","updated":"2021-08-31T01:39:21.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt2dj9u900047eh57xa9hqtw","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Algorithm-位运算总结","date":"2021-09-27T08:48:45.000Z","_content":"\n## 位运算\n\n1. 运算替换\n   - 不用加减 完成 加减法\n   - 不用乘除 完成 乘除法\n     - 减法替代，a 不停 - b, 并计数\n     - 优化 A / X > b 则 A > x * b, 利用此特性将X从最大可能值向最小值循环尝试\n     - a * x > b => a = a - x * b, v = v+x\n   - \n2. 找唯一的数字\n   - 在重复的数字\n   - 找出重复3\n3. 2进制统计\n   - 统计 1 的个数\n     - n & 1<< i 按照位数，逐位查看\n     - 【 n & (n-1) 】运算会将n的最后一位1变成0\n\n","source":"_posts/Algorithm-位运算总结.md","raw":"---\ntitle: Algorithm-位运算总结\ndate: 2021-09-27 16:48:45\ntags:\n    - Algorithm\n---\n\n## 位运算\n\n1. 运算替换\n   - 不用加减 完成 加减法\n   - 不用乘除 完成 乘除法\n     - 减法替代，a 不停 - b, 并计数\n     - 优化 A / X > b 则 A > x * b, 利用此特性将X从最大可能值向最小值循环尝试\n     - a * x > b => a = a - x * b, v = v+x\n   - \n2. 找唯一的数字\n   - 在重复的数字\n   - 找出重复3\n3. 2进制统计\n   - 统计 1 的个数\n     - n & 1<< i 按照位数，逐位查看\n     - 【 n & (n-1) 】运算会将n的最后一位1变成0\n\n","slug":"Algorithm-位运算总结","published":1,"updated":"2021-10-26T07:52:19.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1d0000sqh5ea0798ps","content":"<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><ol>\n<li>运算替换<ul>\n<li>不用加减 完成 加减法</li>\n<li>不用乘除 完成 乘除法<ul>\n<li>减法替代，a 不停 - b, 并计数</li>\n<li>优化 A / X &gt; b 则 A &gt; x * b, 利用此特性将X从最大可能值向最小值循环尝试</li>\n<li>a * x &gt; b =&gt; a = a - x * b, v = v+x</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n<li>找唯一的数字<ul>\n<li>在重复的数字</li>\n<li>找出重复3</li>\n</ul>\n</li>\n<li>2进制统计<ul>\n<li>统计 1 的个数<ul>\n<li>n &amp; 1&lt;&lt; i 按照位数，逐位查看</li>\n<li>【 n &amp; (n-1) 】运算会将n的最后一位1变成0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><ol>\n<li>运算替换<ul>\n<li>不用加减 完成 加减法</li>\n<li>不用乘除 完成 乘除法<ul>\n<li>减法替代，a 不停 - b, 并计数</li>\n<li>优化 A / X &gt; b 则 A &gt; x * b, 利用此特性将X从最大可能值向最小值循环尝试</li>\n<li>a * x &gt; b =&gt; a = a - x * b, v = v+x</li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n<li>找唯一的数字<ul>\n<li>在重复的数字</li>\n<li>找出重复3</li>\n</ul>\n</li>\n<li>2进制统计<ul>\n<li>统计 1 的个数<ul>\n<li>n &amp; 1&lt;&lt; i 按照位数，逐位查看</li>\n<li>【 n &amp; (n-1) 】运算会将n的最后一位1变成0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"SystemDesign-grok-","date":"2021-09-18T03:03:55.000Z","_content":"\n# Grok System Design\n\n## step by step guid\n\n1. 需求明确\n    - 即能问出关于系统的需求问题 - 功能方面\n    - 例如 文件形式 图片/视频； 搜索功能； 前后端侧重；\n\n2. 接口设计\n    - 接口方法设计，方法名，参数\n\n3. 规模预估\n    - 考虑方面： **扩展，分片，负载均衡，缓存**\n    - 基础数据： 用户量，访问量，数据量\n    - 推断数据： 存储，带宽\n\n4. 数据模型\n    - 设计系统内部数据传输时 使用的模型\n    - 影响 **数据库选择，数据分割，数据管理**\n    - SQL / NoSQL\n    - \n5. 高层次模块设计\n   - 功能模块 要覆盖全面\n  \n6. 详细设计\n   - 对其中2-3个模块进行详细设计\n   - 多种方法解决，并说出pros & cons，以及当前场景适合的方法\n   - 大数据量 -> 是否分区 （性能，容量/花费，全表连表查询，事务性需要应用层实现，负载要求高）-> 水平(分片)，垂直（字段分割），功能 \n   - 特殊情况分析 - 特殊高访问数据 / 高使用度功能特殊优化(most recent post)\n   - 缓存，负载均衡\n\n7. 瓶颈识别和解决\n   - single failure handling - 高可用，高可靠\n   - 副本备份 - 可用，性能\n   - monitor监控，performance性能，alert警告\n\n\n### Summary\n\n    需求明确 -> 规模预估（频率 + 数量） ->（存储 + 带宽 + 负载 + 性能） 瓶颈解决 （可用，稳定，监控）\n\n    接口 -> 数据 -> 模块 -> 高频场景功能 设计\n\n------\n# 分布式系统要素\n\n- Scalability 可扩展性\n  - 便于扩展 且不影响性能\n  - 系统，功能，存储，网络 层面\n  - 横向 - 加数量 Cassandra Mongo/ 纵向 - 加性能 Mysql\n  \n- Reliability 可靠性\n  - single point fail\n  - 不回由于几台机器或服务的下线而影响整体功能\n  - 安全性\n  - redundancy & replica\n  \n- Availability 可用\n  - 可长时间持续运行\n  - maintanence\n  - Reliability -> 一定 availability， Available 不一定 reliable\n  \n- Efficientcy 效率\n  - response time / latency 延迟\n  - bandwidth / throughput 吞吐 带宽\n  \n- Manageability Serviceability\n  - 可简单 使用 管理 维护\n\n## Load Balancing\n\n    prevent single point failer\n    1. between user and web server\n    2. between internal layer and web server\n    3. between internal layer and data base\n\n    好处\n    1. 防止单点失败影响用户，less downtime， higher throughput\n    2. 减少wait time，便于维护和管理\n    3. 智能的LB可以分析瓶颈和处理预测信息\n    4. 减少服务器负载，减少服务器损耗\n\n    算法 - 分配方式\n\n    health check first\n    持续链接\n    - least connection 转到连接数最少的服务器 \n    - least response time 转到连接数最少且平均回复时间最短的\n    - least bandwidth 转到现在已用带宽最少的\n    短快的链接\n    - round robin 按顺序均分\n    - weighted round robin 权重\n    - IP HASH 根据client IP随机分配\n\n## Cache \n- Application server Cache\n  - 解决硬盘\n  - 分布式 - distributing cache / global cache\n  - 分布式 cache 对于stateful request 会有问题\n- Content Distributing Network CDN\n  - 解决跨区域server静态资源\n  - local资源中转暂存站\n  - 可用subdomain的轻型HTTP服务器暂时替代\n- Cache invalid\n  - 数据更新\n  - 老数据过期\n  - write through - 更新数据写两次，cache和DB - high latency for write\n  - write around - 跳过cache，所以会有cache miss\n  - write back - 先写入cache，然后disk，有丢失风险。low latency high throughput\n- Cache eviction\n  - FIFO\n  - LIFO 后进先出\n  - LRU Least recent use \n  - MRU Most recent user 时间最近\n  - LFU Frequency 最不常用\n  - MFU 最常用\n  - RR random随机\n  ### cache相关问题\n  ## 1. 缓存穿透 - 某个**不存在的数据** 被大规模访问 导致不断db查询\n    - 解决：布隆过滤器过滤空值要求 / 或者直接缓存空值\n  ## 2. 缓存雪崩 - **某个时间** 大规模的key集体失效 导致DB访问量大增\n    - 解决：缓存设置时间时 外加随机值 / 或者物理永不过期，用过期时间放在value里功能逻辑检查更新\n  \n    事前：\n\n    ① 均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。\n\n    ② 分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。\n\n    ③ 热点数据缓存永远不过期。\n\n    ④ 保证Redis缓存的高可用，防止Redis宕机导致缓存雪崩的问题。可以使用 主从+ 哨兵，Redis集群来避免 Redis 全盘崩溃的情况。\n\n    事中：\n\n    ① 互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降\n\n    ② 使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。\n\n    事后：\n\n    ① 开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。\n\n  ## 3. 缓存击穿 - 某个**高访问量的key失效** 导致DB访问量大增\n    - 解决：\n      - 永不过期\n        - 物理上不过期\n        - 逻辑上更新\n      - mutex锁 - 锁住load DB 操作，缓存先去fetch data\n      ```java\n      public String get(key) {\n      String value = redis.get(key);\n      if (value == null) { //代表缓存值过期\n          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db\n\t\t  if (redis.setnx(key_mutex, 1, 3 * 60) == 1) {  //代表设置成功\n               value = db.get(key);\n                      redis.set(key, value, expire_secs);\n                      redis.del(key_mutex);\n              } else {  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可\n                      sleep(50);\n                      get(key);  //重试\n              }\n          } else {\n              return value;      \n          }\n      ```\n| 解决方案| 优点|缺点|\n| ------------- |:-------------:| -----:|\n|简单分布式互斥锁（mutex key）|  1. 思路简单 2. 保证一致性 |  1. 代码复杂度增大 2. 存在死锁的风险 3. 存在线程池阻塞的风险|\n|“提前”使用互斥锁|遇到有value timeout，先延长，同时去load和更新新的value|\n|不过期(本文)|异步构建缓存，不会阻塞线程池|不保证一致性。2. 代码复杂度增大(每个value都要维护一个timekey)。3. 占用一定的内存空间(每个value都要维护一个timekey)。|\n|资源隔离组件hystrix(本文)| hystrix技术成熟，有效保证后端。2. hystrix监控强大。|部分访问降级|\n\n  ## 4.缓存预热\n  提前缓存数据，根据优先级\n  ## 5.缓存降级\n  缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。\n\n  > 在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。\n\n\n### hystrix\n根据依赖对线程进行管理\n\n不同依赖有各自的线程池\n\n","source":"_posts/SystemDesign-grok.md","raw":"---\ntitle: SystemDesign-grok-\ndate: 2021-09-18 11:03:55\ntags:\n    - System Design\n---\n\n# Grok System Design\n\n## step by step guid\n\n1. 需求明确\n    - 即能问出关于系统的需求问题 - 功能方面\n    - 例如 文件形式 图片/视频； 搜索功能； 前后端侧重；\n\n2. 接口设计\n    - 接口方法设计，方法名，参数\n\n3. 规模预估\n    - 考虑方面： **扩展，分片，负载均衡，缓存**\n    - 基础数据： 用户量，访问量，数据量\n    - 推断数据： 存储，带宽\n\n4. 数据模型\n    - 设计系统内部数据传输时 使用的模型\n    - 影响 **数据库选择，数据分割，数据管理**\n    - SQL / NoSQL\n    - \n5. 高层次模块设计\n   - 功能模块 要覆盖全面\n  \n6. 详细设计\n   - 对其中2-3个模块进行详细设计\n   - 多种方法解决，并说出pros & cons，以及当前场景适合的方法\n   - 大数据量 -> 是否分区 （性能，容量/花费，全表连表查询，事务性需要应用层实现，负载要求高）-> 水平(分片)，垂直（字段分割），功能 \n   - 特殊情况分析 - 特殊高访问数据 / 高使用度功能特殊优化(most recent post)\n   - 缓存，负载均衡\n\n7. 瓶颈识别和解决\n   - single failure handling - 高可用，高可靠\n   - 副本备份 - 可用，性能\n   - monitor监控，performance性能，alert警告\n\n\n### Summary\n\n    需求明确 -> 规模预估（频率 + 数量） ->（存储 + 带宽 + 负载 + 性能） 瓶颈解决 （可用，稳定，监控）\n\n    接口 -> 数据 -> 模块 -> 高频场景功能 设计\n\n------\n# 分布式系统要素\n\n- Scalability 可扩展性\n  - 便于扩展 且不影响性能\n  - 系统，功能，存储，网络 层面\n  - 横向 - 加数量 Cassandra Mongo/ 纵向 - 加性能 Mysql\n  \n- Reliability 可靠性\n  - single point fail\n  - 不回由于几台机器或服务的下线而影响整体功能\n  - 安全性\n  - redundancy & replica\n  \n- Availability 可用\n  - 可长时间持续运行\n  - maintanence\n  - Reliability -> 一定 availability， Available 不一定 reliable\n  \n- Efficientcy 效率\n  - response time / latency 延迟\n  - bandwidth / throughput 吞吐 带宽\n  \n- Manageability Serviceability\n  - 可简单 使用 管理 维护\n\n## Load Balancing\n\n    prevent single point failer\n    1. between user and web server\n    2. between internal layer and web server\n    3. between internal layer and data base\n\n    好处\n    1. 防止单点失败影响用户，less downtime， higher throughput\n    2. 减少wait time，便于维护和管理\n    3. 智能的LB可以分析瓶颈和处理预测信息\n    4. 减少服务器负载，减少服务器损耗\n\n    算法 - 分配方式\n\n    health check first\n    持续链接\n    - least connection 转到连接数最少的服务器 \n    - least response time 转到连接数最少且平均回复时间最短的\n    - least bandwidth 转到现在已用带宽最少的\n    短快的链接\n    - round robin 按顺序均分\n    - weighted round robin 权重\n    - IP HASH 根据client IP随机分配\n\n## Cache \n- Application server Cache\n  - 解决硬盘\n  - 分布式 - distributing cache / global cache\n  - 分布式 cache 对于stateful request 会有问题\n- Content Distributing Network CDN\n  - 解决跨区域server静态资源\n  - local资源中转暂存站\n  - 可用subdomain的轻型HTTP服务器暂时替代\n- Cache invalid\n  - 数据更新\n  - 老数据过期\n  - write through - 更新数据写两次，cache和DB - high latency for write\n  - write around - 跳过cache，所以会有cache miss\n  - write back - 先写入cache，然后disk，有丢失风险。low latency high throughput\n- Cache eviction\n  - FIFO\n  - LIFO 后进先出\n  - LRU Least recent use \n  - MRU Most recent user 时间最近\n  - LFU Frequency 最不常用\n  - MFU 最常用\n  - RR random随机\n  ### cache相关问题\n  ## 1. 缓存穿透 - 某个**不存在的数据** 被大规模访问 导致不断db查询\n    - 解决：布隆过滤器过滤空值要求 / 或者直接缓存空值\n  ## 2. 缓存雪崩 - **某个时间** 大规模的key集体失效 导致DB访问量大增\n    - 解决：缓存设置时间时 外加随机值 / 或者物理永不过期，用过期时间放在value里功能逻辑检查更新\n  \n    事前：\n\n    ① 均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。\n\n    ② 分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。\n\n    ③ 热点数据缓存永远不过期。\n\n    ④ 保证Redis缓存的高可用，防止Redis宕机导致缓存雪崩的问题。可以使用 主从+ 哨兵，Redis集群来避免 Redis 全盘崩溃的情况。\n\n    事中：\n\n    ① 互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降\n\n    ② 使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。\n\n    事后：\n\n    ① 开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。\n\n  ## 3. 缓存击穿 - 某个**高访问量的key失效** 导致DB访问量大增\n    - 解决：\n      - 永不过期\n        - 物理上不过期\n        - 逻辑上更新\n      - mutex锁 - 锁住load DB 操作，缓存先去fetch data\n      ```java\n      public String get(key) {\n      String value = redis.get(key);\n      if (value == null) { //代表缓存值过期\n          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db\n\t\t  if (redis.setnx(key_mutex, 1, 3 * 60) == 1) {  //代表设置成功\n               value = db.get(key);\n                      redis.set(key, value, expire_secs);\n                      redis.del(key_mutex);\n              } else {  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可\n                      sleep(50);\n                      get(key);  //重试\n              }\n          } else {\n              return value;      \n          }\n      ```\n| 解决方案| 优点|缺点|\n| ------------- |:-------------:| -----:|\n|简单分布式互斥锁（mutex key）|  1. 思路简单 2. 保证一致性 |  1. 代码复杂度增大 2. 存在死锁的风险 3. 存在线程池阻塞的风险|\n|“提前”使用互斥锁|遇到有value timeout，先延长，同时去load和更新新的value|\n|不过期(本文)|异步构建缓存，不会阻塞线程池|不保证一致性。2. 代码复杂度增大(每个value都要维护一个timekey)。3. 占用一定的内存空间(每个value都要维护一个timekey)。|\n|资源隔离组件hystrix(本文)| hystrix技术成熟，有效保证后端。2. hystrix监控强大。|部分访问降级|\n\n  ## 4.缓存预热\n  提前缓存数据，根据优先级\n  ## 5.缓存降级\n  缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。\n\n  > 在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。\n\n\n### hystrix\n根据依赖对线程进行管理\n\n不同依赖有各自的线程池\n\n","slug":"SystemDesign-grok","published":1,"updated":"2021-10-26T07:52:42.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1l0002sqh500xs3wyn","content":"<h1 id=\"Grok-System-Design\"><a href=\"#Grok-System-Design\" class=\"headerlink\" title=\"Grok System Design\"></a>Grok System Design</h1><h2 id=\"step-by-step-guid\"><a href=\"#step-by-step-guid\" class=\"headerlink\" title=\"step by step guid\"></a>step by step guid</h2><ol>\n<li><p>需求明确</p>\n<ul>\n<li>即能问出关于系统的需求问题 - 功能方面</li>\n<li>例如 文件形式 图片/视频； 搜索功能； 前后端侧重；</li>\n</ul>\n</li>\n<li><p>接口设计</p>\n<ul>\n<li>接口方法设计，方法名，参数</li>\n</ul>\n</li>\n<li><p>规模预估</p>\n<ul>\n<li>考虑方面： <strong>扩展，分片，负载均衡，缓存</strong></li>\n<li>基础数据： 用户量，访问量，数据量</li>\n<li>推断数据： 存储，带宽</li>\n</ul>\n</li>\n<li><p>数据模型</p>\n<ul>\n<li>设计系统内部数据传输时 使用的模型</li>\n<li>影响 <strong>数据库选择，数据分割，数据管理</strong></li>\n<li>SQL / NoSQL</li>\n<li></li>\n</ul>\n</li>\n<li><p>高层次模块设计</p>\n<ul>\n<li>功能模块 要覆盖全面</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li>对其中2-3个模块进行详细设计</li>\n<li>多种方法解决，并说出pros &amp; cons，以及当前场景适合的方法</li>\n<li>大数据量 -&gt; 是否分区 （性能，容量/花费，全表连表查询，事务性需要应用层实现，负载要求高）-&gt; 水平(分片)，垂直（字段分割），功能 </li>\n<li>特殊情况分析 - 特殊高访问数据 / 高使用度功能特殊优化(most recent post)</li>\n<li>缓存，负载均衡</li>\n</ul>\n</li>\n<li><p>瓶颈识别和解决</p>\n<ul>\n<li>single failure handling - 高可用，高可靠</li>\n<li>副本备份 - 可用，性能</li>\n<li>monitor监控，performance性能，alert警告</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><pre><code>需求明确 -&gt; 规模预估（频率 + 数量） -&gt;（存储 + 带宽 + 负载 + 性能） 瓶颈解决 （可用，稳定，监控）\n\n接口 -&gt; 数据 -&gt; 模块 -&gt; 高频场景功能 设计\n</code></pre>\n<hr>\n<h1 id=\"分布式系统要素\"><a href=\"#分布式系统要素\" class=\"headerlink\" title=\"分布式系统要素\"></a>分布式系统要素</h1><ul>\n<li>Scalability 可扩展性<ul>\n<li>便于扩展 且不影响性能</li>\n<li>系统，功能，存储，网络 层面</li>\n<li>横向 - 加数量 Cassandra Mongo/ 纵向 - 加性能 Mysql</li>\n</ul>\n</li>\n<li>Reliability 可靠性<ul>\n<li>single point fail</li>\n<li>不回由于几台机器或服务的下线而影响整体功能</li>\n<li>安全性</li>\n<li>redundancy &amp; replica</li>\n</ul>\n</li>\n<li>Availability 可用<ul>\n<li>可长时间持续运行</li>\n<li>maintanence</li>\n<li>Reliability -&gt; 一定 availability， Available 不一定 reliable</li>\n</ul>\n</li>\n<li>Efficientcy 效率<ul>\n<li>response time / latency 延迟</li>\n<li>bandwidth / throughput 吞吐 带宽</li>\n</ul>\n</li>\n<li>Manageability Serviceability<ul>\n<li>可简单 使用 管理 维护</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Load-Balancing\"><a href=\"#Load-Balancing\" class=\"headerlink\" title=\"Load Balancing\"></a>Load Balancing</h2><pre><code>prevent single point failer\n1. between user and web server\n2. between internal layer and web server\n3. between internal layer and data base\n\n好处\n1. 防止单点失败影响用户，less downtime， higher throughput\n2. 减少wait time，便于维护和管理\n3. 智能的LB可以分析瓶颈和处理预测信息\n4. 减少服务器负载，减少服务器损耗\n\n算法 - 分配方式\n\nhealth check first\n持续链接\n- least connection 转到连接数最少的服务器 \n- least response time 转到连接数最少且平均回复时间最短的\n- least bandwidth 转到现在已用带宽最少的\n短快的链接\n- round robin 按顺序均分\n- weighted round robin 权重\n- IP HASH 根据client IP随机分配\n</code></pre>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><ul>\n<li><p>Application server Cache</p>\n<ul>\n<li>解决硬盘</li>\n<li>分布式 - distributing cache / global cache</li>\n<li>分布式 cache 对于stateful request 会有问题</li>\n</ul>\n</li>\n<li><p>Content Distributing Network CDN</p>\n<ul>\n<li>解决跨区域server静态资源</li>\n<li>local资源中转暂存站</li>\n<li>可用subdomain的轻型HTTP服务器暂时替代</li>\n</ul>\n</li>\n<li><p>Cache invalid</p>\n<ul>\n<li>数据更新</li>\n<li>老数据过期</li>\n<li>write through - 更新数据写两次，cache和DB - high latency for write</li>\n<li>write around - 跳过cache，所以会有cache miss</li>\n<li>write back - 先写入cache，然后disk，有丢失风险。low latency high throughput</li>\n</ul>\n</li>\n<li><p>Cache eviction</p>\n<ul>\n<li><p>FIFO</p>\n</li>\n<li><p>LIFO 后进先出</p>\n</li>\n<li><p>LRU Least recent use </p>\n</li>\n<li><p>MRU Most recent user 时间最近</p>\n</li>\n<li><p>LFU Frequency 最不常用</p>\n</li>\n<li><p>MFU 最常用</p>\n</li>\n<li><p>RR random随机</p>\n<h3 id=\"cache相关问题\"><a href=\"#cache相关问题\" class=\"headerlink\" title=\"cache相关问题\"></a>cache相关问题</h3><h2 id=\"1-缓存穿透-某个不存在的数据-被大规模访问-导致不断db查询\"><a href=\"#1-缓存穿透-某个不存在的数据-被大规模访问-导致不断db查询\" class=\"headerlink\" title=\"1. 缓存穿透 - 某个不存在的数据 被大规模访问 导致不断db查询\"></a>1. 缓存穿透 - 某个<strong>不存在的数据</strong> 被大规模访问 导致不断db查询</h2><ul>\n<li>解决：布隆过滤器过滤空值要求 / 或者直接缓存空值<h2 id=\"2-缓存雪崩-某个时间-大规模的key集体失效-导致DB访问量大增\"><a href=\"#2-缓存雪崩-某个时间-大规模的key集体失效-导致DB访问量大增\" class=\"headerlink\" title=\"2. 缓存雪崩 - 某个时间 大规模的key集体失效 导致DB访问量大增\"></a>2. 缓存雪崩 - <strong>某个时间</strong> 大规模的key集体失效 导致DB访问量大增</h2></li>\n<li>解决：缓存设置时间时 外加随机值 / 或者物理永不过期，用过期时间放在value里功能逻辑检查更新</li>\n</ul>\n<p>事前：</p>\n<p>① 均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。</p>\n<p>② 分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。</p>\n<p>③ 热点数据缓存永远不过期。</p>\n<p>④ 保证Redis缓存的高可用，防止Redis宕机导致缓存雪崩的问题。可以使用 主从+ 哨兵，Redis集群来避免 Redis 全盘崩溃的情况。</p>\n<p>事中：</p>\n<p>① 互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</p>\n<p>② 使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。</p>\n<p>事后：</p>\n<p>① 开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p>\n</li>\n</ul>\n<h2 id=\"3-缓存击穿-某个高访问量的key失效-导致DB访问量大增\"><a href=\"#3-缓存击穿-某个高访问量的key失效-导致DB访问量大增\" class=\"headerlink\" title=\"3. 缓存击穿 - 某个高访问量的key失效 导致DB访问量大增\"></a>3. 缓存击穿 - 某个<strong>高访问量的key失效</strong> 导致DB访问量大增</h2><ul>\n<li>解决：<ul>\n<li>永不过期<ul>\n<li>物理上不过期</li>\n<li>逻辑上更新</li>\n</ul>\n</li>\n<li>mutex锁 - 锁住load DB 操作，缓存先去fetch data<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(key)</span> </span>&#123;</span><br><span class=\"line\">  String value = redis.get(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//代表缓存值过期</span></span><br><span class=\"line\">      <span class=\"comment\">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (redis.setnx(key_mutex, <span class=\"number\">1</span>, <span class=\"number\">3</span> * <span class=\"number\">60</span>) == <span class=\"number\">1</span>) &#123;  <span class=\"comment\">//代表设置成功</span></span><br><span class=\"line\">           value = db.get(key);</span><br><span class=\"line\">                  redis.set(key, value, expire_secs);</span><br><span class=\"line\">                  redis.del(key_mutex);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span></span><br><span class=\"line\">                  sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">                  get(key);  <span class=\"comment\">//重试</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;      </span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>解决方案</th>\n<th align=\"center\">优点</th>\n<th align=\"right\">缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>简单分布式互斥锁（mutex key）</td>\n<td align=\"center\">1. 思路简单 2. 保证一致性</td>\n<td align=\"right\">1. 代码复杂度增大 2. 存在死锁的风险 3. 存在线程池阻塞的风险</td>\n</tr>\n<tr>\n<td>“提前”使用互斥锁</td>\n<td align=\"center\">遇到有value timeout，先延长，同时去load和更新新的value</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>不过期(本文)</td>\n<td align=\"center\">异步构建缓存，不会阻塞线程池</td>\n<td align=\"right\">不保证一致性。2. 代码复杂度增大(每个value都要维护一个timekey)。3. 占用一定的内存空间(每个value都要维护一个timekey)。</td>\n</tr>\n<tr>\n<td>资源隔离组件hystrix(本文)</td>\n<td align=\"center\">hystrix技术成熟，有效保证后端。2. hystrix监控强大。</td>\n<td align=\"right\">部分访问降级</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-缓存预热\"><a href=\"#4-缓存预热\" class=\"headerlink\" title=\"4.缓存预热\"></a>4.缓存预热</h2><p>提前缓存数据，根据优先级</p>\n<h2 id=\"5-缓存降级\"><a href=\"#5-缓存降级\" class=\"headerlink\" title=\"5.缓存降级\"></a>5.缓存降级</h2><p>缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。</p>\n<blockquote>\n<p>在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"hystrix\"><a href=\"#hystrix\" class=\"headerlink\" title=\"hystrix\"></a>hystrix</h3><p>根据依赖对线程进行管理</p>\n<p>不同依赖有各自的线程池</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Grok-System-Design\"><a href=\"#Grok-System-Design\" class=\"headerlink\" title=\"Grok System Design\"></a>Grok System Design</h1><h2 id=\"step-by-step-guid\"><a href=\"#step-by-step-guid\" class=\"headerlink\" title=\"step by step guid\"></a>step by step guid</h2><ol>\n<li><p>需求明确</p>\n<ul>\n<li>即能问出关于系统的需求问题 - 功能方面</li>\n<li>例如 文件形式 图片/视频； 搜索功能； 前后端侧重；</li>\n</ul>\n</li>\n<li><p>接口设计</p>\n<ul>\n<li>接口方法设计，方法名，参数</li>\n</ul>\n</li>\n<li><p>规模预估</p>\n<ul>\n<li>考虑方面： <strong>扩展，分片，负载均衡，缓存</strong></li>\n<li>基础数据： 用户量，访问量，数据量</li>\n<li>推断数据： 存储，带宽</li>\n</ul>\n</li>\n<li><p>数据模型</p>\n<ul>\n<li>设计系统内部数据传输时 使用的模型</li>\n<li>影响 <strong>数据库选择，数据分割，数据管理</strong></li>\n<li>SQL / NoSQL</li>\n<li></li>\n</ul>\n</li>\n<li><p>高层次模块设计</p>\n<ul>\n<li>功能模块 要覆盖全面</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li>对其中2-3个模块进行详细设计</li>\n<li>多种方法解决，并说出pros &amp; cons，以及当前场景适合的方法</li>\n<li>大数据量 -&gt; 是否分区 （性能，容量/花费，全表连表查询，事务性需要应用层实现，负载要求高）-&gt; 水平(分片)，垂直（字段分割），功能 </li>\n<li>特殊情况分析 - 特殊高访问数据 / 高使用度功能特殊优化(most recent post)</li>\n<li>缓存，负载均衡</li>\n</ul>\n</li>\n<li><p>瓶颈识别和解决</p>\n<ul>\n<li>single failure handling - 高可用，高可靠</li>\n<li>副本备份 - 可用，性能</li>\n<li>monitor监控，performance性能，alert警告</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><pre><code>需求明确 -&gt; 规模预估（频率 + 数量） -&gt;（存储 + 带宽 + 负载 + 性能） 瓶颈解决 （可用，稳定，监控）\n\n接口 -&gt; 数据 -&gt; 模块 -&gt; 高频场景功能 设计\n</code></pre>\n<hr>\n<h1 id=\"分布式系统要素\"><a href=\"#分布式系统要素\" class=\"headerlink\" title=\"分布式系统要素\"></a>分布式系统要素</h1><ul>\n<li>Scalability 可扩展性<ul>\n<li>便于扩展 且不影响性能</li>\n<li>系统，功能，存储，网络 层面</li>\n<li>横向 - 加数量 Cassandra Mongo/ 纵向 - 加性能 Mysql</li>\n</ul>\n</li>\n<li>Reliability 可靠性<ul>\n<li>single point fail</li>\n<li>不回由于几台机器或服务的下线而影响整体功能</li>\n<li>安全性</li>\n<li>redundancy &amp; replica</li>\n</ul>\n</li>\n<li>Availability 可用<ul>\n<li>可长时间持续运行</li>\n<li>maintanence</li>\n<li>Reliability -&gt; 一定 availability， Available 不一定 reliable</li>\n</ul>\n</li>\n<li>Efficientcy 效率<ul>\n<li>response time / latency 延迟</li>\n<li>bandwidth / throughput 吞吐 带宽</li>\n</ul>\n</li>\n<li>Manageability Serviceability<ul>\n<li>可简单 使用 管理 维护</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Load-Balancing\"><a href=\"#Load-Balancing\" class=\"headerlink\" title=\"Load Balancing\"></a>Load Balancing</h2><pre><code>prevent single point failer\n1. between user and web server\n2. between internal layer and web server\n3. between internal layer and data base\n\n好处\n1. 防止单点失败影响用户，less downtime， higher throughput\n2. 减少wait time，便于维护和管理\n3. 智能的LB可以分析瓶颈和处理预测信息\n4. 减少服务器负载，减少服务器损耗\n\n算法 - 分配方式\n\nhealth check first\n持续链接\n- least connection 转到连接数最少的服务器 \n- least response time 转到连接数最少且平均回复时间最短的\n- least bandwidth 转到现在已用带宽最少的\n短快的链接\n- round robin 按顺序均分\n- weighted round robin 权重\n- IP HASH 根据client IP随机分配\n</code></pre>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><ul>\n<li><p>Application server Cache</p>\n<ul>\n<li>解决硬盘</li>\n<li>分布式 - distributing cache / global cache</li>\n<li>分布式 cache 对于stateful request 会有问题</li>\n</ul>\n</li>\n<li><p>Content Distributing Network CDN</p>\n<ul>\n<li>解决跨区域server静态资源</li>\n<li>local资源中转暂存站</li>\n<li>可用subdomain的轻型HTTP服务器暂时替代</li>\n</ul>\n</li>\n<li><p>Cache invalid</p>\n<ul>\n<li>数据更新</li>\n<li>老数据过期</li>\n<li>write through - 更新数据写两次，cache和DB - high latency for write</li>\n<li>write around - 跳过cache，所以会有cache miss</li>\n<li>write back - 先写入cache，然后disk，有丢失风险。low latency high throughput</li>\n</ul>\n</li>\n<li><p>Cache eviction</p>\n<ul>\n<li><p>FIFO</p>\n</li>\n<li><p>LIFO 后进先出</p>\n</li>\n<li><p>LRU Least recent use </p>\n</li>\n<li><p>MRU Most recent user 时间最近</p>\n</li>\n<li><p>LFU Frequency 最不常用</p>\n</li>\n<li><p>MFU 最常用</p>\n</li>\n<li><p>RR random随机</p>\n<h3 id=\"cache相关问题\"><a href=\"#cache相关问题\" class=\"headerlink\" title=\"cache相关问题\"></a>cache相关问题</h3><h2 id=\"1-缓存穿透-某个不存在的数据-被大规模访问-导致不断db查询\"><a href=\"#1-缓存穿透-某个不存在的数据-被大规模访问-导致不断db查询\" class=\"headerlink\" title=\"1. 缓存穿透 - 某个不存在的数据 被大规模访问 导致不断db查询\"></a>1. 缓存穿透 - 某个<strong>不存在的数据</strong> 被大规模访问 导致不断db查询</h2><ul>\n<li>解决：布隆过滤器过滤空值要求 / 或者直接缓存空值<h2 id=\"2-缓存雪崩-某个时间-大规模的key集体失效-导致DB访问量大增\"><a href=\"#2-缓存雪崩-某个时间-大规模的key集体失效-导致DB访问量大增\" class=\"headerlink\" title=\"2. 缓存雪崩 - 某个时间 大规模的key集体失效 导致DB访问量大增\"></a>2. 缓存雪崩 - <strong>某个时间</strong> 大规模的key集体失效 导致DB访问量大增</h2></li>\n<li>解决：缓存设置时间时 外加随机值 / 或者物理永不过期，用过期时间放在value里功能逻辑检查更新</li>\n</ul>\n<p>事前：</p>\n<p>① 均匀过期：设置不同的过期时间，让缓存失效的时间尽量均匀，避免相同的过期时间导致缓存雪崩，造成大量数据库的访问。</p>\n<p>② 分级缓存：第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。</p>\n<p>③ 热点数据缓存永远不过期。</p>\n<p>④ 保证Redis缓存的高可用，防止Redis宕机导致缓存雪崩的问题。可以使用 主从+ 哨兵，Redis集群来避免 Redis 全盘崩溃的情况。</p>\n<p>事中：</p>\n<p>① 互斥锁：在缓存失效后，通过互斥锁或者队列来控制读数据写缓存的线程数量，比如某个key只允许一个线程查询数据和写缓存，其他线程等待。这种方式会阻塞其他的线程，此时系统的吞吐量会下降</p>\n<p>② 使用熔断机制，限流降级。当流量达到一定的阈值，直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上将数据库击垮，至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。</p>\n<p>事后：</p>\n<p>① 开启Redis持久化机制，尽快恢复缓存数据，一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。</p>\n</li>\n</ul>\n<h2 id=\"3-缓存击穿-某个高访问量的key失效-导致DB访问量大增\"><a href=\"#3-缓存击穿-某个高访问量的key失效-导致DB访问量大增\" class=\"headerlink\" title=\"3. 缓存击穿 - 某个高访问量的key失效 导致DB访问量大增\"></a>3. 缓存击穿 - 某个<strong>高访问量的key失效</strong> 导致DB访问量大增</h2><ul>\n<li>解决：<ul>\n<li>永不过期<ul>\n<li>物理上不过期</li>\n<li>逻辑上更新</li>\n</ul>\n</li>\n<li>mutex锁 - 锁住load DB 操作，缓存先去fetch data<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">get</span><span class=\"params\">(key)</span> </span>&#123;</span><br><span class=\"line\">  String value = redis.get(key);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//代表缓存值过期</span></span><br><span class=\"line\">      <span class=\"comment\">//设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (redis.setnx(key_mutex, <span class=\"number\">1</span>, <span class=\"number\">3</span> * <span class=\"number\">60</span>) == <span class=\"number\">1</span>) &#123;  <span class=\"comment\">//代表设置成功</span></span><br><span class=\"line\">           value = db.get(key);</span><br><span class=\"line\">                  redis.set(key, value, expire_secs);</span><br><span class=\"line\">                  redis.del(key_mutex);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span></span><br><span class=\"line\">                  sleep(<span class=\"number\">50</span>);</span><br><span class=\"line\">                  get(key);  <span class=\"comment\">//重试</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> value;      </span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>解决方案</th>\n<th align=\"center\">优点</th>\n<th align=\"right\">缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>简单分布式互斥锁（mutex key）</td>\n<td align=\"center\">1. 思路简单 2. 保证一致性</td>\n<td align=\"right\">1. 代码复杂度增大 2. 存在死锁的风险 3. 存在线程池阻塞的风险</td>\n</tr>\n<tr>\n<td>“提前”使用互斥锁</td>\n<td align=\"center\">遇到有value timeout，先延长，同时去load和更新新的value</td>\n<td align=\"right\"></td>\n</tr>\n<tr>\n<td>不过期(本文)</td>\n<td align=\"center\">异步构建缓存，不会阻塞线程池</td>\n<td align=\"right\">不保证一致性。2. 代码复杂度增大(每个value都要维护一个timekey)。3. 占用一定的内存空间(每个value都要维护一个timekey)。</td>\n</tr>\n<tr>\n<td>资源隔离组件hystrix(本文)</td>\n<td align=\"center\">hystrix技术成熟，有效保证后端。2. hystrix监控强大。</td>\n<td align=\"right\">部分访问降级</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-缓存预热\"><a href=\"#4-缓存预热\" class=\"headerlink\" title=\"4.缓存预热\"></a>4.缓存预热</h2><p>提前缓存数据，根据优先级</p>\n<h2 id=\"5-缓存降级\"><a href=\"#5-缓存降级\" class=\"headerlink\" title=\"5.缓存降级\"></a>5.缓存降级</h2><p>缓存降级是指缓存失效或缓存服务器挂掉的情况下，不去访问数据库，直接返回默认数据或访问服务的内存数据。降级一般是有损的操作，所以尽量减少降级对于业务的影响程度。</p>\n<blockquote>\n<p>在项目实战中通常会将部分热点数据缓存到服务的内存中，这样一旦缓存出现异常，可以直接使用服务的内存数据，从而避免数据库遭受巨大压力。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"hystrix\"><a href=\"#hystrix\" class=\"headerlink\" title=\"hystrix\"></a>hystrix</h3><p>根据依赖对线程进行管理</p>\n<p>不同依赖有各自的线程池</p>\n"},{"title":"BlockChain-BitCoin","date":"2021-09-18T03:03:15.000Z","_content":"","source":"_posts/BlockChain-BitCoin.md","raw":"---\ntitle: BlockChain-BitCoin\ndate: 2021-09-18 11:03:15\ntags:\n---\n","slug":"BlockChain-BitCoin","published":1,"updated":"2021-09-18T03:03:15.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1m0003sqh5hgyzftly","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"grok-Instagram","date":"2021-10-27T02:44:13.000Z","_content":"","source":"_posts/grok-Instagram.md","raw":"---\ntitle: grok-Instagram\ndate: 2021-10-27 10:44:13\ntags:\n---\n","slug":"grok-Instagram","published":1,"updated":"2021-10-27T02:44:13.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1r0005sqh521ke2lr4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"grok-TinyUrl","date":"2021-10-26T01:24:24.000Z","_content":"","source":"_posts/grok-TinyUrl.md","raw":"---\ntitle: grok-TinyUrl\ndate: 2021-10-26 09:24:24\ntags:\n---\n","slug":"grok-TinyUrl","published":1,"updated":"2021-10-26T01:24:24.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1s0006sqh53t3ff4oy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"计算机网络-1","date":"2021-09-02T03:57:34.000Z","_content":"\n# 分层\n\n- 物理\n- 数据链路\n- 网络\n- 传输 - （会话，表示）\n- 应用层\n---\n\n| 网络协议      | 层级         | 描述 |\n| ------------- |:-------------:| -----:|\n| **TCP**     | 传输层协议 | 面向连接，3次握手。面对二进制数据流传输 |\n| **UDP**     | 传输层协议 | 非面向连接，不可靠，但是快速 |\n| **Http**     | 应用层    |   无状态，面对数据包装，服务器响应request后就断掉|\n| **Socket** |    |    针对 TCP 的具体接口实现提供传输层编程使用方法|\n| **RPC**     |  | remote Procedure Call 远程过程调用，跨服务器调用方法 |\n\n---\n\n## 有HTTP为何要用rpc\n> RPC跟HTTP不是对立面，RPC中可以使用HTTP作为通讯协议。RPC是一种设计、实现框架，通讯协议只是其中一部分。\n\n> RPC的本质是提供了一种轻量无感知的跨进程通信的方式，远程调用的过程是透明的，你并不知道这个调用的方法是部署在哪里，通过PRC能够解耦服务）。RPC是根据语言的API来定义的，而不是基于网络的应用来定义的，调用更方便，协议私密更安全、内容更小效率更高\n\n## 优势\n>http接口是在接口不多、系统与系统交互较少的情况下，解决信息孤岛初期常使用的一种通信手段；优点就是简单、直接、开发方便。利用现成的http协议 进行传输。\n\n但是如果是一个大型的网站，内部子系统较多、接口非常多的情况下，RPC框架的好处就显示出来了\n1. 首先（基于TCP协议的情况下）就是长链接，不必每次通信都要像http 一样去3次握手什么的，减少了网络开销；\n2. 其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统 一化的操作。\n3. 第三个来说就是安全性。最后就是最近流行的服务化架构、服务化治理，RPC框架是一个强力的支撑。\n\n## RPC 任务\n- 通信建立 - TCP\n- 寻址 - RPC需要服务器地址、端口，调用函数名称，建立方法到call id映射\n- 序列化和反序列化， 调用过程是二进制，但是应用需要正常数据\n\n## gRPC\n\ngoogle RPC，基于 HTTP/2\n\n- 内容交换使用 protobuff 自动且快色的序列化 .proto 接口描述文件\n- 传输协议 http2 性能好\n\n## HTTP 2.0\n- 原来 基于文本， 现在基于 二进制\n- 现在 多request可共享连接\n- 现在 header压缩\n- 现在 服务器主动推送\n\n\n\n\n\n","source":"_posts/计算机网络-1.md","raw":"---\ntitle: 计算机网络-1\ndate: 2021-09-02 11:57:34\ntags:\n    - 网络系统\n---\n\n# 分层\n\n- 物理\n- 数据链路\n- 网络\n- 传输 - （会话，表示）\n- 应用层\n---\n\n| 网络协议      | 层级         | 描述 |\n| ------------- |:-------------:| -----:|\n| **TCP**     | 传输层协议 | 面向连接，3次握手。面对二进制数据流传输 |\n| **UDP**     | 传输层协议 | 非面向连接，不可靠，但是快速 |\n| **Http**     | 应用层    |   无状态，面对数据包装，服务器响应request后就断掉|\n| **Socket** |    |    针对 TCP 的具体接口实现提供传输层编程使用方法|\n| **RPC**     |  | remote Procedure Call 远程过程调用，跨服务器调用方法 |\n\n---\n\n## 有HTTP为何要用rpc\n> RPC跟HTTP不是对立面，RPC中可以使用HTTP作为通讯协议。RPC是一种设计、实现框架，通讯协议只是其中一部分。\n\n> RPC的本质是提供了一种轻量无感知的跨进程通信的方式，远程调用的过程是透明的，你并不知道这个调用的方法是部署在哪里，通过PRC能够解耦服务）。RPC是根据语言的API来定义的，而不是基于网络的应用来定义的，调用更方便，协议私密更安全、内容更小效率更高\n\n## 优势\n>http接口是在接口不多、系统与系统交互较少的情况下，解决信息孤岛初期常使用的一种通信手段；优点就是简单、直接、开发方便。利用现成的http协议 进行传输。\n\n但是如果是一个大型的网站，内部子系统较多、接口非常多的情况下，RPC框架的好处就显示出来了\n1. 首先（基于TCP协议的情况下）就是长链接，不必每次通信都要像http 一样去3次握手什么的，减少了网络开销；\n2. 其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统 一化的操作。\n3. 第三个来说就是安全性。最后就是最近流行的服务化架构、服务化治理，RPC框架是一个强力的支撑。\n\n## RPC 任务\n- 通信建立 - TCP\n- 寻址 - RPC需要服务器地址、端口，调用函数名称，建立方法到call id映射\n- 序列化和反序列化， 调用过程是二进制，但是应用需要正常数据\n\n## gRPC\n\ngoogle RPC，基于 HTTP/2\n\n- 内容交换使用 protobuff 自动且快色的序列化 .proto 接口描述文件\n- 传输协议 http2 性能好\n\n## HTTP 2.0\n- 原来 基于文本， 现在基于 二进制\n- 现在 多request可共享连接\n- 现在 header压缩\n- 现在 服务器主动推送\n\n\n\n\n\n","slug":"计算机网络-1","published":1,"updated":"2021-09-02T07:50:37.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1v0008sqh54qb8g2wc","content":"<h1 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h1><ul>\n<li>物理</li>\n<li>数据链路</li>\n<li>网络</li>\n<li>传输 - （会话，表示）</li>\n<li>应用层</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>网络协议</th>\n<th align=\"center\">层级</th>\n<th align=\"right\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>TCP</strong></td>\n<td align=\"center\">传输层协议</td>\n<td align=\"right\">面向连接，3次握手。面对二进制数据流传输</td>\n</tr>\n<tr>\n<td><strong>UDP</strong></td>\n<td align=\"center\">传输层协议</td>\n<td align=\"right\">非面向连接，不可靠，但是快速</td>\n</tr>\n<tr>\n<td><strong>Http</strong></td>\n<td align=\"center\">应用层</td>\n<td align=\"right\">无状态，面对数据包装，服务器响应request后就断掉</td>\n</tr>\n<tr>\n<td><strong>Socket</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\">针对 TCP 的具体接口实现提供传输层编程使用方法</td>\n</tr>\n<tr>\n<td><strong>RPC</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\">remote Procedure Call 远程过程调用，跨服务器调用方法</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"有HTTP为何要用rpc\"><a href=\"#有HTTP为何要用rpc\" class=\"headerlink\" title=\"有HTTP为何要用rpc\"></a>有HTTP为何要用rpc</h2><blockquote>\n<p>RPC跟HTTP不是对立面，RPC中可以使用HTTP作为通讯协议。RPC是一种设计、实现框架，通讯协议只是其中一部分。</p>\n</blockquote>\n<blockquote>\n<p>RPC的本质是提供了一种轻量无感知的跨进程通信的方式，远程调用的过程是透明的，你并不知道这个调用的方法是部署在哪里，通过PRC能够解耦服务）。RPC是根据语言的API来定义的，而不是基于网络的应用来定义的，调用更方便，协议私密更安全、内容更小效率更高</p>\n</blockquote>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><blockquote>\n<p>http接口是在接口不多、系统与系统交互较少的情况下，解决信息孤岛初期常使用的一种通信手段；优点就是简单、直接、开发方便。利用现成的http协议 进行传输。</p>\n</blockquote>\n<p>但是如果是一个大型的网站，内部子系统较多、接口非常多的情况下，RPC框架的好处就显示出来了</p>\n<ol>\n<li>首先（基于TCP协议的情况下）就是长链接，不必每次通信都要像http 一样去3次握手什么的，减少了网络开销；</li>\n<li>其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统 一化的操作。</li>\n<li>第三个来说就是安全性。最后就是最近流行的服务化架构、服务化治理，RPC框架是一个强力的支撑。</li>\n</ol>\n<h2 id=\"RPC-任务\"><a href=\"#RPC-任务\" class=\"headerlink\" title=\"RPC 任务\"></a>RPC 任务</h2><ul>\n<li>通信建立 - TCP</li>\n<li>寻址 - RPC需要服务器地址、端口，调用函数名称，建立方法到call id映射</li>\n<li>序列化和反序列化， 调用过程是二进制，但是应用需要正常数据</li>\n</ul>\n<h2 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h2><p>google RPC，基于 HTTP/2</p>\n<ul>\n<li>内容交换使用 protobuff 自动且快色的序列化 .proto 接口描述文件</li>\n<li>传输协议 http2 性能好</li>\n</ul>\n<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h2><ul>\n<li>原来 基于文本， 现在基于 二进制</li>\n<li>现在 多request可共享连接</li>\n<li>现在 header压缩</li>\n<li>现在 服务器主动推送</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"分层\"><a href=\"#分层\" class=\"headerlink\" title=\"分层\"></a>分层</h1><ul>\n<li>物理</li>\n<li>数据链路</li>\n<li>网络</li>\n<li>传输 - （会话，表示）</li>\n<li>应用层</li>\n</ul>\n<hr>\n<table>\n<thead>\n<tr>\n<th>网络协议</th>\n<th align=\"center\">层级</th>\n<th align=\"right\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>TCP</strong></td>\n<td align=\"center\">传输层协议</td>\n<td align=\"right\">面向连接，3次握手。面对二进制数据流传输</td>\n</tr>\n<tr>\n<td><strong>UDP</strong></td>\n<td align=\"center\">传输层协议</td>\n<td align=\"right\">非面向连接，不可靠，但是快速</td>\n</tr>\n<tr>\n<td><strong>Http</strong></td>\n<td align=\"center\">应用层</td>\n<td align=\"right\">无状态，面对数据包装，服务器响应request后就断掉</td>\n</tr>\n<tr>\n<td><strong>Socket</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\">针对 TCP 的具体接口实现提供传输层编程使用方法</td>\n</tr>\n<tr>\n<td><strong>RPC</strong></td>\n<td align=\"center\"></td>\n<td align=\"right\">remote Procedure Call 远程过程调用，跨服务器调用方法</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"有HTTP为何要用rpc\"><a href=\"#有HTTP为何要用rpc\" class=\"headerlink\" title=\"有HTTP为何要用rpc\"></a>有HTTP为何要用rpc</h2><blockquote>\n<p>RPC跟HTTP不是对立面，RPC中可以使用HTTP作为通讯协议。RPC是一种设计、实现框架，通讯协议只是其中一部分。</p>\n</blockquote>\n<blockquote>\n<p>RPC的本质是提供了一种轻量无感知的跨进程通信的方式，远程调用的过程是透明的，你并不知道这个调用的方法是部署在哪里，通过PRC能够解耦服务）。RPC是根据语言的API来定义的，而不是基于网络的应用来定义的，调用更方便，协议私密更安全、内容更小效率更高</p>\n</blockquote>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><blockquote>\n<p>http接口是在接口不多、系统与系统交互较少的情况下，解决信息孤岛初期常使用的一种通信手段；优点就是简单、直接、开发方便。利用现成的http协议 进行传输。</p>\n</blockquote>\n<p>但是如果是一个大型的网站，内部子系统较多、接口非常多的情况下，RPC框架的好处就显示出来了</p>\n<ol>\n<li>首先（基于TCP协议的情况下）就是长链接，不必每次通信都要像http 一样去3次握手什么的，减少了网络开销；</li>\n<li>其次就是RPC框架一般都有注册中心，有丰富的监控管理；发布、下线接口、动态扩展等，对调用方来说是无感知、统 一化的操作。</li>\n<li>第三个来说就是安全性。最后就是最近流行的服务化架构、服务化治理，RPC框架是一个强力的支撑。</li>\n</ol>\n<h2 id=\"RPC-任务\"><a href=\"#RPC-任务\" class=\"headerlink\" title=\"RPC 任务\"></a>RPC 任务</h2><ul>\n<li>通信建立 - TCP</li>\n<li>寻址 - RPC需要服务器地址、端口，调用函数名称，建立方法到call id映射</li>\n<li>序列化和反序列化， 调用过程是二进制，但是应用需要正常数据</li>\n</ul>\n<h2 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h2><p>google RPC，基于 HTTP/2</p>\n<ul>\n<li>内容交换使用 protobuff 自动且快色的序列化 .proto 接口描述文件</li>\n<li>传输协议 http2 性能好</li>\n</ul>\n<h2 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h2><ul>\n<li>原来 基于文本， 现在基于 二进制</li>\n<li>现在 多request可共享连接</li>\n<li>现在 header压缩</li>\n<li>现在 服务器主动推送</li>\n</ul>\n"},{"title":"grok-PasteBin","date":"2021-10-26T01:29:35.000Z","_content":"\n# What is Paste Bin - requirement\n\n- customer enter a text on webpage\n- generate url for the text\n- expire time\n- title / cutome uRL\n\n## additional\n- analytics \n- user login\n- public private setting\n- password crypted\n- grammer high light\n\n# What is the throughput - capacity & volumn calcute\n\n- text size limit - 10MB\n- url size\n- write volumn - 1M/DAY = 12/s\n- access & read volumn = 60/s\n\nband width\n- WRITE = 12 * 10 = 120 KB / S\n- READ = 600 KB /S\n\nStorage\n\nassume average 10K\n- total : 10KB * 1M  = 10 GB/day = 36TB/10year\n- key for each data: 1M * 365 * 10 = 36B < 64^6\n- key size: 6bytes * 36B = 22GB \n\nCache 20% of read\n- 5M read * 0.2 * 10KB = 10GB\n\n# API design - function design\n\n1. basic create url on text\n    - input (api_dev_key,text) optional(title, custom url, id, expiredate)\n    - output [url]\n2. get paste\n3. delete paste\n\n# DB design\n\nkey | text | title | expire date | user id | url\n\nseperate user\n\nkey | title | create date | expire date\n\nuserid | email | create date\n\nS3 store object data\n\n# Component design\n\napplication server\n- get text\n- generate key\n- store\n- return url\n\npossible error - duplicate key - regenerate\n\nkey generate service - pre generate key & keep track used key\n\n# DB detail\n\n- partition & replica\n- purge DB clean up\n  - handle expire \n  - expire program\n- Cache\n  - 20%\n  - chose what to cache - LRU\n  - update\n\n# Security and Permissions\n\n","source":"_posts/grok-PasteBin.md","raw":"---\ntitle: grok-PasteBin\ndate: 2021-10-26 09:29:35\ntags:\n---\n\n# What is Paste Bin - requirement\n\n- customer enter a text on webpage\n- generate url for the text\n- expire time\n- title / cutome uRL\n\n## additional\n- analytics \n- user login\n- public private setting\n- password crypted\n- grammer high light\n\n# What is the throughput - capacity & volumn calcute\n\n- text size limit - 10MB\n- url size\n- write volumn - 1M/DAY = 12/s\n- access & read volumn = 60/s\n\nband width\n- WRITE = 12 * 10 = 120 KB / S\n- READ = 600 KB /S\n\nStorage\n\nassume average 10K\n- total : 10KB * 1M  = 10 GB/day = 36TB/10year\n- key for each data: 1M * 365 * 10 = 36B < 64^6\n- key size: 6bytes * 36B = 22GB \n\nCache 20% of read\n- 5M read * 0.2 * 10KB = 10GB\n\n# API design - function design\n\n1. basic create url on text\n    - input (api_dev_key,text) optional(title, custom url, id, expiredate)\n    - output [url]\n2. get paste\n3. delete paste\n\n# DB design\n\nkey | text | title | expire date | user id | url\n\nseperate user\n\nkey | title | create date | expire date\n\nuserid | email | create date\n\nS3 store object data\n\n# Component design\n\napplication server\n- get text\n- generate key\n- store\n- return url\n\npossible error - duplicate key - regenerate\n\nkey generate service - pre generate key & keep track used key\n\n# DB detail\n\n- partition & replica\n- purge DB clean up\n  - handle expire \n  - expire program\n- Cache\n  - 20%\n  - chose what to cache - LRU\n  - update\n\n# Security and Permissions\n\n","slug":"grok-PasteBin","published":1,"updated":"2021-10-26T07:52:42.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckva85n1w0009sqh55jx97k3u","content":"<h1 id=\"What-is-Paste-Bin-requirement\"><a href=\"#What-is-Paste-Bin-requirement\" class=\"headerlink\" title=\"What is Paste Bin - requirement\"></a>What is Paste Bin - requirement</h1><ul>\n<li>customer enter a text on webpage</li>\n<li>generate url for the text</li>\n<li>expire time</li>\n<li>title / cutome uRL</li>\n</ul>\n<h2 id=\"additional\"><a href=\"#additional\" class=\"headerlink\" title=\"additional\"></a>additional</h2><ul>\n<li>analytics </li>\n<li>user login</li>\n<li>public private setting</li>\n<li>password crypted</li>\n<li>grammer high light</li>\n</ul>\n<h1 id=\"What-is-the-throughput-capacity-amp-volumn-calcute\"><a href=\"#What-is-the-throughput-capacity-amp-volumn-calcute\" class=\"headerlink\" title=\"What is the throughput - capacity &amp; volumn calcute\"></a>What is the throughput - capacity &amp; volumn calcute</h1><ul>\n<li>text size limit - 10MB</li>\n<li>url size</li>\n<li>write volumn - 1M/DAY = 12/s</li>\n<li>access &amp; read volumn = 60/s</li>\n</ul>\n<p>band width</p>\n<ul>\n<li>WRITE = 12 * 10 = 120 KB / S</li>\n<li>READ = 600 KB /S</li>\n</ul>\n<p>Storage</p>\n<p>assume average 10K</p>\n<ul>\n<li>total : 10KB * 1M  = 10 GB/day = 36TB/10year</li>\n<li>key for each data: 1M * 365 * 10 = 36B &lt; 64^6</li>\n<li>key size: 6bytes * 36B = 22GB </li>\n</ul>\n<p>Cache 20% of read</p>\n<ul>\n<li>5M read * 0.2 * 10KB = 10GB</li>\n</ul>\n<h1 id=\"API-design-function-design\"><a href=\"#API-design-function-design\" class=\"headerlink\" title=\"API design - function design\"></a>API design - function design</h1><ol>\n<li>basic create url on text<ul>\n<li>input (api_dev_key,text) optional(title, custom url, id, expiredate)</li>\n<li>output [url]</li>\n</ul>\n</li>\n<li>get paste</li>\n<li>delete paste</li>\n</ol>\n<h1 id=\"DB-design\"><a href=\"#DB-design\" class=\"headerlink\" title=\"DB design\"></a>DB design</h1><p>key | text | title | expire date | user id | url</p>\n<p>seperate user</p>\n<p>key | title | create date | expire date</p>\n<p>userid | email | create date</p>\n<p>S3 store object data</p>\n<h1 id=\"Component-design\"><a href=\"#Component-design\" class=\"headerlink\" title=\"Component design\"></a>Component design</h1><p>application server</p>\n<ul>\n<li>get text</li>\n<li>generate key</li>\n<li>store</li>\n<li>return url</li>\n</ul>\n<p>possible error - duplicate key - regenerate</p>\n<p>key generate service - pre generate key &amp; keep track used key</p>\n<h1 id=\"DB-detail\"><a href=\"#DB-detail\" class=\"headerlink\" title=\"DB detail\"></a>DB detail</h1><ul>\n<li>partition &amp; replica</li>\n<li>purge DB clean up<ul>\n<li>handle expire </li>\n<li>expire program</li>\n</ul>\n</li>\n<li>Cache<ul>\n<li>20%</li>\n<li>chose what to cache - LRU</li>\n<li>update</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Security-and-Permissions\"><a href=\"#Security-and-Permissions\" class=\"headerlink\" title=\"Security and Permissions\"></a>Security and Permissions</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-Paste-Bin-requirement\"><a href=\"#What-is-Paste-Bin-requirement\" class=\"headerlink\" title=\"What is Paste Bin - requirement\"></a>What is Paste Bin - requirement</h1><ul>\n<li>customer enter a text on webpage</li>\n<li>generate url for the text</li>\n<li>expire time</li>\n<li>title / cutome uRL</li>\n</ul>\n<h2 id=\"additional\"><a href=\"#additional\" class=\"headerlink\" title=\"additional\"></a>additional</h2><ul>\n<li>analytics </li>\n<li>user login</li>\n<li>public private setting</li>\n<li>password crypted</li>\n<li>grammer high light</li>\n</ul>\n<h1 id=\"What-is-the-throughput-capacity-amp-volumn-calcute\"><a href=\"#What-is-the-throughput-capacity-amp-volumn-calcute\" class=\"headerlink\" title=\"What is the throughput - capacity &amp; volumn calcute\"></a>What is the throughput - capacity &amp; volumn calcute</h1><ul>\n<li>text size limit - 10MB</li>\n<li>url size</li>\n<li>write volumn - 1M/DAY = 12/s</li>\n<li>access &amp; read volumn = 60/s</li>\n</ul>\n<p>band width</p>\n<ul>\n<li>WRITE = 12 * 10 = 120 KB / S</li>\n<li>READ = 600 KB /S</li>\n</ul>\n<p>Storage</p>\n<p>assume average 10K</p>\n<ul>\n<li>total : 10KB * 1M  = 10 GB/day = 36TB/10year</li>\n<li>key for each data: 1M * 365 * 10 = 36B &lt; 64^6</li>\n<li>key size: 6bytes * 36B = 22GB </li>\n</ul>\n<p>Cache 20% of read</p>\n<ul>\n<li>5M read * 0.2 * 10KB = 10GB</li>\n</ul>\n<h1 id=\"API-design-function-design\"><a href=\"#API-design-function-design\" class=\"headerlink\" title=\"API design - function design\"></a>API design - function design</h1><ol>\n<li>basic create url on text<ul>\n<li>input (api_dev_key,text) optional(title, custom url, id, expiredate)</li>\n<li>output [url]</li>\n</ul>\n</li>\n<li>get paste</li>\n<li>delete paste</li>\n</ol>\n<h1 id=\"DB-design\"><a href=\"#DB-design\" class=\"headerlink\" title=\"DB design\"></a>DB design</h1><p>key | text | title | expire date | user id | url</p>\n<p>seperate user</p>\n<p>key | title | create date | expire date</p>\n<p>userid | email | create date</p>\n<p>S3 store object data</p>\n<h1 id=\"Component-design\"><a href=\"#Component-design\" class=\"headerlink\" title=\"Component design\"></a>Component design</h1><p>application server</p>\n<ul>\n<li>get text</li>\n<li>generate key</li>\n<li>store</li>\n<li>return url</li>\n</ul>\n<p>possible error - duplicate key - regenerate</p>\n<p>key generate service - pre generate key &amp; keep track used key</p>\n<h1 id=\"DB-detail\"><a href=\"#DB-detail\" class=\"headerlink\" title=\"DB detail\"></a>DB detail</h1><ul>\n<li>partition &amp; replica</li>\n<li>purge DB clean up<ul>\n<li>handle expire </li>\n<li>expire program</li>\n</ul>\n</li>\n<li>Cache<ul>\n<li>20%</li>\n<li>chose what to cache - LRU</li>\n<li>update</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Security-and-Permissions\"><a href=\"#Security-and-Permissions\" class=\"headerlink\" title=\"Security and Permissions\"></a>Security and Permissions</h1>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckt2dj9ts00007eh5cf813mjx","tag_id":"ckt2dnxqo0000amh50s3lauxc","_id":"ckt2dnxqu0002amh507kt1sdp"},{"post_id":"ckt2dj9u500017eh58w2n24oo","tag_id":"ckt2dnxqu0001amh561cshpcx","_id":"ckt2dnxqv0004amh56bd750xi"},{"post_id":"ckt2dj9u700027eh5a5769eda","tag_id":"ckt2dnxqu0003amh585lld8rr","_id":"ckt2dnxqw0006amh59ch54ab2"},{"post_id":"ckt2dj9u800037eh53ag99td3","tag_id":"ckt2dnxqv0005amh52wcw6s0l","_id":"ckt2dnxqw0007amh52e8v3k10"},{"post_id":"ckva85n1d0000sqh5ea0798ps","tag_id":"ckt2dnxqu0001amh561cshpcx","_id":"ckva85n1l0001sqh56cvsfivh"},{"post_id":"ckva85n1l0002sqh500xs3wyn","tag_id":"ckva85n1n0004sqh512dqdlpl","_id":"ckva85n1t0007sqh585yd8drj"},{"post_id":"ckva85n1v0008sqh54qb8g2wc","tag_id":"ckva85n1x000asqh52z3yabcv","_id":"ckva85n1y000bsqh5c3mxe8u7"}],"Tag":[{"name":"BlockChain","_id":"ckt2dnxqo0000amh50s3lauxc"},{"name":"Algorithm","_id":"ckt2dnxqu0001amh561cshpcx"},{"name":"学习方法","_id":"ckt2dnxqu0003amh585lld8rr"},{"name":"Spring","_id":"ckt2dnxqv0005amh52wcw6s0l"},{"name":"System Design","_id":"ckva85n1n0004sqh512dqdlpl"},{"name":"网络系统","_id":"ckva85n1x000asqh52z3yabcv"}]}}