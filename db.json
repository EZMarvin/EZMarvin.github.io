{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/image/note.jpeg","path":"image/note.jpeg","modified":0,"renderable":0},{"_id":"source/image/tendermint.png","path":"image/tendermint.png","modified":0,"renderable":0},{"_id":"source/image/tendermintFlow.png","path":"image/tendermintFlow.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/BlockChain-Tendermint共识.md","hash":"a6103d27ac5c96e5fb2f93d7dbffa91825a901cf","modified":1630551143602},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1630374410919},{"_id":"source/_posts/First-Article.md","hash":"a4bbd1a00d8c1bddf8cf01d0f37cdf26ea66b039","modified":1630550952764},{"_id":"source/_posts/Algorithm-二分总结.md","hash":"070264f818508578e9bfeff6d9c985cd2a80a3f3","modified":1630464131701},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1630373961819},{"_id":"source/image/note.jpeg","hash":"42048c74e98e3b05fc7885ce4c3c3c9904d3cdfc","modified":1630381255098},{"_id":"source/_posts/Spring-Cors以及Filter和Interceptor.md","hash":"e3eefc50c036811dc42885a10c55eb8412a0f13d","modified":1630484323348},{"_id":"source/image/tendermint.png","hash":"1ca36d4b1a073ab83caff93c9e5fda1a93babdcd","modified":1630483099673},{"_id":"source/image/tendermintFlow.png","hash":"b7feef886fbd2624f26949ec55a58c714513bdce","modified":1630483843787},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630549475815},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1630549475804},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1630549475804},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1630549475804},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1630549475802},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1630549475803},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1630549475817},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1630549475803},{"_id":"themes/yilia/_config.yml","hash":"c3a1694c111e2e1f05a174bd893fe951038fbda2","modified":1630549475804},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1630549475805},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1630549475840},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1630549475805},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1630549475805},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1630549475805},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1630549475806},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1630549475806},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1630549475816},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1630549475816},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1630549475816},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1630549475817},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1630549475806},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1630549475816},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630549475837},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630549475817},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1630549475840},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1630549475817},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1630549475818},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1630549475808},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1630549475807},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1630549475808},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1630549475808},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1630549475807},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1630549475807},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1630549475834},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1630549475808},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1630549475803},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1630549475809},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1630549475808},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1630549475809},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1630549475810},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1630549475810},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1630549475810},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1630549475811},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1630549475815},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1630549475815},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630549475834},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630549475835},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630549475835},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630549475835},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630549475836},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630549475834},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630549475836},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630549475836},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630549475836},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1630549475831},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1630549475832},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1630549475831},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1630549475833},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1630549475832},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1630549475831},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1630549475832},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1630549475833},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1630549475833},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1630549475833},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1630549475833},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1630549475819},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1630549475832},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1630549475819},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1630549475818},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1630549475819},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1630549475819},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1630549475820},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1630549475820},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1630549475820},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1630549475820},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1630549475823},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1630549475825},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1630549475825},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1630549475826},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1630549475825},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1630549475827},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1630549475827},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1630549475828},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1630549475828},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1630549475827},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1630549475828},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1630549475829},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1630549475828},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1630549475829},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1630549475829},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1630549475830},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1630549475830},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1630549475830},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1630549475811},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1630549475811},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1630549475812},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1630549475812},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1630549475812},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1630549475813},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1630549475813},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1630549475813},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1630549475813},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630549475823},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630549475824},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630549475824},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1630549475821},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1630549475821},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1630549475822},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1630549475822},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1630549475822},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1630549475826},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630549475826},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630549475826},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1630549475812},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1630549475838},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1630549475839},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1630549475815},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630549475824},{"_id":"public/2021/09/01/BlockChain-Tendermint共识/index.html","hash":"8088e9d53e972a2541f104bebbea7d279b6b4335","modified":1630551156312},{"_id":"public/2021/09/01/Spring-Cors以及Filter和Interceptor/index.html","hash":"bfd5066ccca73d34e1fc0e951eae48427d8ac99a","modified":1630549986185},{"_id":"public/2021/09/01/Algorithm-二分总结/index.html","hash":"800488c6214d032e832540425c96a1b448aeeae4","modified":1630549986185},{"_id":"public/2021/08/31/First-Article/index.html","hash":"0ad5c0f82cf9b1b7f5b37db337ceea18d8e2cd7e","modified":1630550965626},{"_id":"public/2021/08/31/hello-world/index.html","hash":"7aa336b0ad858e5f77946bcac801cc368db9aa8c","modified":1630549986185},{"_id":"public/archives/2021/index.html","hash":"dde02f97cce2af2db26a8ac0ccdfd7682f4bc3bb","modified":1630549986185},{"_id":"public/archives/index.html","hash":"8c537a0583c0e4c1d1b6cc10d70cb5a1efd62d0d","modified":1630549986185},{"_id":"public/archives/2021/08/index.html","hash":"eae3dd578e61a29fb6ffab9013ac07eb6b12da7b","modified":1630549986185},{"_id":"public/archives/2021/09/index.html","hash":"0edd165788e6be07205e23a4d44ca75a4a5bd1cf","modified":1630549986185},{"_id":"public/index.html","hash":"6a0a1d499d96f50bebefbe1a60d33ec992282f7e","modified":1630551156312},{"_id":"public/image/note.jpeg","hash":"42048c74e98e3b05fc7885ce4c3c3c9904d3cdfc","modified":1630549986185},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1630549986185},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1630549986185},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1630549986185},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1630549986185},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1630549986185},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1630549986185},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1630549986185},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1630549986185},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1630549986185},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1630549986185},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1630549986185},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1630549986185},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1630549986185},{"_id":"public/image/tendermint.png","hash":"1ca36d4b1a073ab83caff93c9e5fda1a93babdcd","modified":1630549986185},{"_id":"public/image/tendermintFlow.png","hash":"b7feef886fbd2624f26949ec55a58c714513bdce","modified":1630549986185},{"_id":"public/content.json","hash":"0b7f46d29b117ac6c026b5859402f9f605285dd9","modified":1630550208675}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"#BlockChain Tendermint共识","date":"2021-09-01T06:29:56.000Z","_content":"# Tendermint \n\n一种拜占庭共识算法\n\n不同环境 安全 一致性 复用\n\nCore + ABCI， 是对共识层以下的一层封装\n\n![note image](https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg)\n\n---\n## 1. 核心模块\n### ABCI app\n- socket 链接\n- 实现ABCI 接口\n    - checkTX\n    - DeliverTX\n    - Commit\n- 能处理 ABCI message\n\n### Tendermint Core\n- 共识\n- P2P 网络层\n- RPC 区块链接口\n- 交易缓存，队列\n\n---\n\n\n## 1. 算法 - 阶段\n\n![note image](https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg)\n\nNewHeight\n- 进入到下一轮 共识\n- round robin 选择 proposer （voting power）\n\n**Propose**\n- 判定 有没有lock 的 block\n    - 没有 -> gossip 广播proposal\n    - 有 -> 直接propose locked block + proof of block\n\n**preVote**\n- LOCK 判定\n    - 有 就对lock的block投票\n    - 没有 就对当前轮\n- 同时收集 prevote 的投票 打包 进入 PoLC\n\n- 如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound < PoLC-Round < 当前 Round，则解锁 Lock-Block。 \n\n- 如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。\n在 Prevote 阶段不会锁住任何 block。\n\n**preCommit**\n- Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段\n\n- 如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round\n\n- 如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit\n- 收到 +2/3 投票进入 commit， 否则 下一轮 propose\n\nCommit\n- 节点必须收到该 block\n- 节点必须等待，直到收到 2/3 的 节点 commit 信息。\n\n---\n## Feature\n\n- propose + preVote + preCommit 称为Round\n- commit 前可能会经过多个round\n- PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合\n- 锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：\n    1. 该验证人必须在预提交的区块进行预投票。\n    2. 当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。\n\n---\n## 优势 bft-raft\n1. 同一个高度不会有多个快，不会分叉\n\n## 与PBFT\n1. 相同点：\n 1）同属BFT体系。\n 2）抗1/3拜占庭节点攻击。\n 3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。\n 4）两者都需要达到法定人数才能提交块。\n\n2. 不同点：\n    1. Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。\n\n    当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。\n    简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。\n\n    2. 另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。\n\n    3. 最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。\n\n\n[Reference详解](https://cloud.tencent.com/developer/article/1446865)\n\n\n\n","source":"_posts/BlockChain-Tendermint共识.md","raw":"---\ntitle: '#BlockChain Tendermint共识'\ndate: 2021-09-01 14:29:56\ntags:\n---\n# Tendermint \n\n一种拜占庭共识算法\n\n不同环境 安全 一致性 复用\n\nCore + ABCI， 是对共识层以下的一层封装\n\n![note image](https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg)\n\n---\n## 1. 核心模块\n### ABCI app\n- socket 链接\n- 实现ABCI 接口\n    - checkTX\n    - DeliverTX\n    - Commit\n- 能处理 ABCI message\n\n### Tendermint Core\n- 共识\n- P2P 网络层\n- RPC 区块链接口\n- 交易缓存，队列\n\n---\n\n\n## 1. 算法 - 阶段\n\n![note image](https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg)\n\nNewHeight\n- 进入到下一轮 共识\n- round robin 选择 proposer （voting power）\n\n**Propose**\n- 判定 有没有lock 的 block\n    - 没有 -> gossip 广播proposal\n    - 有 -> 直接propose locked block + proof of block\n\n**preVote**\n- LOCK 判定\n    - 有 就对lock的block投票\n    - 没有 就对当前轮\n- 同时收集 prevote 的投票 打包 进入 PoLC\n\n- 如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound < PoLC-Round < 当前 Round，则解锁 Lock-Block。 \n\n- 如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。\n在 Prevote 阶段不会锁住任何 block。\n\n**preCommit**\n- Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段\n\n- 如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round\n\n- 如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit\n- 收到 +2/3 投票进入 commit， 否则 下一轮 propose\n\nCommit\n- 节点必须收到该 block\n- 节点必须等待，直到收到 2/3 的 节点 commit 信息。\n\n---\n## Feature\n\n- propose + preVote + preCommit 称为Round\n- commit 前可能会经过多个round\n- PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合\n- 锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：\n    1. 该验证人必须在预提交的区块进行预投票。\n    2. 当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。\n\n---\n## 优势 bft-raft\n1. 同一个高度不会有多个快，不会分叉\n\n## 与PBFT\n1. 相同点：\n 1）同属BFT体系。\n 2）抗1/3拜占庭节点攻击。\n 3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。\n 4）两者都需要达到法定人数才能提交块。\n\n2. 不同点：\n    1. Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。\n\n    当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。\n    简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。\n\n    2. 另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。\n\n    3. 最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。\n\n\n[Reference详解](https://cloud.tencent.com/developer/article/1446865)\n\n\n\n","slug":"BlockChain-Tendermint共识","published":1,"updated":"2021-09-02T02:52:23.602Z","_id":"ckt2bd1pj00007ch550iyfzp8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Tendermint\"><a href=\"#Tendermint\" class=\"headerlink\" title=\"Tendermint\"></a>Tendermint</h1><p>一种拜占庭共识算法</p>\n<p>不同环境 安全 一致性 复用</p>\n<p>Core + ABCI， 是对共识层以下的一层封装</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg\" alt=\"note image\"></p>\n<hr>\n<h2 id=\"1-核心模块\"><a href=\"#1-核心模块\" class=\"headerlink\" title=\"1. 核心模块\"></a>1. 核心模块</h2><h3 id=\"ABCI-app\"><a href=\"#ABCI-app\" class=\"headerlink\" title=\"ABCI app\"></a>ABCI app</h3><ul>\n<li>socket 链接</li>\n<li>实现ABCI 接口<ul>\n<li>checkTX</li>\n<li>DeliverTX</li>\n<li>Commit</li>\n</ul>\n</li>\n<li>能处理 ABCI message</li>\n</ul>\n<h3 id=\"Tendermint-Core\"><a href=\"#Tendermint-Core\" class=\"headerlink\" title=\"Tendermint Core\"></a>Tendermint Core</h3><ul>\n<li>共识</li>\n<li>P2P 网络层</li>\n<li>RPC 区块链接口</li>\n<li>交易缓存，队列</li>\n</ul>\n<hr>\n<h2 id=\"1-算法-阶段\"><a href=\"#1-算法-阶段\" class=\"headerlink\" title=\"1. 算法 - 阶段\"></a>1. 算法 - 阶段</h2><p><img src=\"https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg\" alt=\"note image\"></p>\n<p>NewHeight</p>\n<ul>\n<li>进入到下一轮 共识</li>\n<li>round robin 选择 proposer （voting power）</li>\n</ul>\n<p><strong>Propose</strong></p>\n<ul>\n<li>判定 有没有lock 的 block<ul>\n<li>没有 -&gt; gossip 广播proposal</li>\n<li>有 -&gt; 直接propose locked block + proof of block</li>\n</ul>\n</li>\n</ul>\n<p><strong>preVote</strong></p>\n<ul>\n<li><p>LOCK 判定</p>\n<ul>\n<li>有 就对lock的block投票</li>\n<li>没有 就对当前轮</li>\n</ul>\n</li>\n<li><p>同时收集 prevote 的投票 打包 进入 PoLC</p>\n</li>\n<li><p>如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound &lt; PoLC-Round &lt; 当前 Round，则解锁 Lock-Block。 </p>\n</li>\n<li><p>如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。<br>在 Prevote 阶段不会锁住任何 block。</p>\n</li>\n</ul>\n<p><strong>preCommit</strong></p>\n<ul>\n<li><p>Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段</p>\n</li>\n<li><p>如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round</p>\n</li>\n<li><p>如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit</p>\n</li>\n<li><p>收到 +2/3 投票进入 commit， 否则 下一轮 propose</p>\n</li>\n</ul>\n<p>Commit</p>\n<ul>\n<li>节点必须收到该 block</li>\n<li>节点必须等待，直到收到 2/3 的 节点 commit 信息。</li>\n</ul>\n<hr>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ul>\n<li>propose + preVote + preCommit 称为Round</li>\n<li>commit 前可能会经过多个round</li>\n<li>PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合</li>\n<li>锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：<ol>\n<li>该验证人必须在预提交的区块进行预投票。</li>\n<li>当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"优势-bft-raft\"><a href=\"#优势-bft-raft\" class=\"headerlink\" title=\"优势 bft-raft\"></a>优势 bft-raft</h2><ol>\n<li>同一个高度不会有多个快，不会分叉</li>\n</ol>\n<h2 id=\"与PBFT\"><a href=\"#与PBFT\" class=\"headerlink\" title=\"与PBFT\"></a>与PBFT</h2><ol>\n<li><p>相同点：<br>1）同属BFT体系。<br>2）抗1/3拜占庭节点攻击。<br>3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。<br>4）两者都需要达到法定人数才能提交块。</p>\n</li>\n<li><p>不同点：</p>\n<ol>\n<li>Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。</li>\n</ol>\n<p> 当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。<br> 简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。</p>\n<ol start=\"2\">\n<li><p>另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。</p>\n</li>\n<li><p>最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://cloud.tencent.com/developer/article/1446865\">Reference详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Tendermint\"><a href=\"#Tendermint\" class=\"headerlink\" title=\"Tendermint\"></a>Tendermint</h1><p>一种拜占庭共识算法</p>\n<p>不同环境 安全 一致性 复用</p>\n<p>Core + ABCI， 是对共识层以下的一层封装</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-ce91a17d2eaf8c6a472c404663006b7e_1440w.jpg\" alt=\"note image\"></p>\n<hr>\n<h2 id=\"1-核心模块\"><a href=\"#1-核心模块\" class=\"headerlink\" title=\"1. 核心模块\"></a>1. 核心模块</h2><h3 id=\"ABCI-app\"><a href=\"#ABCI-app\" class=\"headerlink\" title=\"ABCI app\"></a>ABCI app</h3><ul>\n<li>socket 链接</li>\n<li>实现ABCI 接口<ul>\n<li>checkTX</li>\n<li>DeliverTX</li>\n<li>Commit</li>\n</ul>\n</li>\n<li>能处理 ABCI message</li>\n</ul>\n<h3 id=\"Tendermint-Core\"><a href=\"#Tendermint-Core\" class=\"headerlink\" title=\"Tendermint Core\"></a>Tendermint Core</h3><ul>\n<li>共识</li>\n<li>P2P 网络层</li>\n<li>RPC 区块链接口</li>\n<li>交易缓存，队列</li>\n</ul>\n<hr>\n<h2 id=\"1-算法-阶段\"><a href=\"#1-算法-阶段\" class=\"headerlink\" title=\"1. 算法 - 阶段\"></a>1. 算法 - 阶段</h2><p><img src=\"https://pic1.zhimg.com/80/v2-ebcaa425624856f3b88109e24baf5a20_1440w.jpg\" alt=\"note image\"></p>\n<p>NewHeight</p>\n<ul>\n<li>进入到下一轮 共识</li>\n<li>round robin 选择 proposer （voting power）</li>\n</ul>\n<p><strong>Propose</strong></p>\n<ul>\n<li>判定 有没有lock 的 block<ul>\n<li>没有 -&gt; gossip 广播proposal</li>\n<li>有 -&gt; 直接propose locked block + proof of block</li>\n</ul>\n</li>\n</ul>\n<p><strong>preVote</strong></p>\n<ul>\n<li><p>LOCK 判定</p>\n<ul>\n<li>有 就对lock的block投票</li>\n<li>没有 就对当前轮</li>\n</ul>\n</li>\n<li><p>同时收集 prevote 的投票 打包 进入 PoLC</p>\n</li>\n<li><p>如果自己有 Lock-Block，这时又收到一个新的针对另外一个块的 PoLC，并且满足LastLockRound &lt; PoLC-Round &lt; 当前 Round，则解锁 Lock-Block。 </p>\n</li>\n<li><p>如果 timeout 期间没收到 proposal，或者收到的 proposal 是无效的，那么就投 nil 票。<br>在 Prevote 阶段不会锁住任何 block。</p>\n</li>\n</ul>\n<p><strong>preCommit</strong></p>\n<ul>\n<li><p>Prevote 超时或者收到的 Prevote 的 nil 票超过 2/3 时 进入此阶段</p>\n</li>\n<li><p>如果此时收到了 +2/3 的 prevote 投票，就广播一条 precommit 投票，同时，把自己锁在当前的 block 上（把之前的都释放掉）。 LastLockRound 置为当前 Round</p>\n</li>\n<li><p>如果收到 +2/3 的 nil 投票，那么就释放锁。投 precommit</p>\n</li>\n<li><p>收到 +2/3 投票进入 commit， 否则 下一轮 propose</p>\n</li>\n</ul>\n<p>Commit</p>\n<ul>\n<li>节点必须收到该 block</li>\n<li>节点必须等待，直到收到 2/3 的 节点 commit 信息。</li>\n</ul>\n<hr>\n<h2 id=\"Feature\"><a href=\"#Feature\" class=\"headerlink\" title=\"Feature\"></a>Feature</h2><ul>\n<li>propose + preVote + preCommit 称为Round</li>\n<li>commit 前可能会经过多个round</li>\n<li>PoLC - proof of lock change - 表示特定 块+高度+轮数 上 prevote 投票集合</li>\n<li>锁定机制：一旦验证人预投票了一个区块，那么该验证人就会被锁定在这个区块。然后：<ol>\n<li>该验证人必须在预提交的区块进行预投票。</li>\n<li>当前一轮预提议和预投票没成功提交区块时，该验证人就会被解锁，然后进行对新块的下一轮预提交。</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"优势-bft-raft\"><a href=\"#优势-bft-raft\" class=\"headerlink\" title=\"优势 bft-raft\"></a>优势 bft-raft</h2><ol>\n<li>同一个高度不会有多个快，不会分叉</li>\n</ol>\n<h2 id=\"与PBFT\"><a href=\"#与PBFT\" class=\"headerlink\" title=\"与PBFT\"></a>与PBFT</h2><ol>\n<li><p>相同点：<br>1）同属BFT体系。<br>2）抗1/3拜占庭节点攻击。<br>3）三阶段提交，第一阶段广播交易（区块），后两阶段广播签名（确认）。<br>4）两者都需要达到法定人数才能提交块。</p>\n</li>\n<li><p>不同点：</p>\n<ol>\n<li>Tendermint与PBFT的区别主要是在超过1/3节点为拜占庭节点的情况下。</li>\n</ol>\n<p> 当拜占庭节点数量在验证者数量的1/3和2/3之间时，PBFT算法无法提供保证，使得攻击者可以将任意结果返回给客户端。而Tendermint共识模型认为必须超过2/3数量的precommit确认才能提交块。举个例子，如果1/2的验证者是拜占庭节点，Tendermint中这些拜占庭节点能够阻止区块的提交，但他们自己也无法提交恶意块。而在PBFT中拜占庭节点却是可以提交块给客户端。<br> 简单的说，就是比特币的网络存在分叉的可能，而Tendermint不会发生这种情况。</p>\n<ol start=\"2\">\n<li><p>另一个不同点在于拜占庭节点概念不同，PBFT指的是节点数，而Tendermint代表的是节点的权益数，也就是投票权力。</p>\n</li>\n<li><p>最后一点，PBFT需要预设一组固定的验证人，而Tendermint是通过要求超过2/3法定人数的验证人员批准会员变更，从而支持验证人的动态变化。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p><a href=\"https://cloud.tencent.com/developer/article/1446865\">Reference详解</a></p>\n"},{"title":"#Algorithm 二分总结","date":"2021-09-01T02:18:16.000Z","_content":"# 二分法\n---\n左右边界，取中位数查看\n\n**防止溢出**：mid = l + (r - l) // 2\n\n```\nwhile L < R:  # 在L = R时停止\n    if mid == target:\n        R = mid\n    if mid < target:\n        L = mid + 1 # 左边界收缩\n    else:\n        R = mid\n\n```\n\n","source":"_posts/Algorithm-二分总结.md","raw":"---\ntitle: '#Algorithm 二分总结'\ndate: 2021-09-01 10:18:16\ntags:\n---\n# 二分法\n---\n左右边界，取中位数查看\n\n**防止溢出**：mid = l + (r - l) // 2\n\n```\nwhile L < R:  # 在L = R时停止\n    if mid == target:\n        R = mid\n    if mid < target:\n        L = mid + 1 # 左边界收缩\n    else:\n        R = mid\n\n```\n\n","slug":"Algorithm-二分总结","published":1,"updated":"2021-09-01T02:42:11.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt2bd1po00017ch503cw4k7e","content":"<h1 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h1><hr>\n<p>左右边界，取中位数查看</p>\n<p><strong>防止溢出</strong>：mid = l + (r - l) // 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while L &lt; R:  # 在L = R时停止</span><br><span class=\"line\">    if mid == target:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\">    if mid &lt; target:</span><br><span class=\"line\">        L = mid + 1 # 左边界收缩</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h1><hr>\n<p>左右边界，取中位数查看</p>\n<p><strong>防止溢出</strong>：mid = l + (r - l) // 2</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while L &lt; R:  # 在L = R时停止</span><br><span class=\"line\">    if mid == target:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\">    if mid &lt; target:</span><br><span class=\"line\">        L = mid + 1 # 左边界收缩</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        R = mid</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"#Spring Cors以及Filter和Interceptor","date":"2021-09-01T03:35:41.000Z","_content":"\n# Cors 在spring中配置方法\n\n## 1. @CrossOrigin 注解\n\n```java\n@RestController\nclass HelloController {\n    @GetMapping(\"hello\")\n    @CrossOrigin(origins = [\"http://localhost:8080\"]) #针对方法handler\n    fun hello(): String {\n        return \"Hello, CORS!\"\n    }\n}\n```\n\n## 2. 实现 WebMvcConfigurer.addCorsMappings 方法\n\n增加全局配置\n```java\n@Configuration\n@EnableWebMvc\nclass MvcConfig: WebMvcConfigurer {\n    override fun addCorsMappings(registry: CorsRegistry) {\n        registry.addMapping(\"/hello\")\n                .allowedOrigins(\"http://localhost:8080\")\n    }\n}\n```\n\n此种方法使用了CorsRegistry 和 CorsRegistration\n\n## 3. 注入 CorsFilter\n\n```java\n@Configuration\nclass CORSConfiguration {\n    @Bean\n    fun corsFilter(): CorsFilter {\n        val configuration = CorsConfiguration()\n        configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n        val source = UrlBasedCorsConfigurationSource()\n        source.registerCorsConfiguration(\"/hello\", configuration)\n        return CorsFilter(source)\n    }\n}\n```\n\n也可以实现FilterRegistrationBean\n```java\n@Bean\npublic FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter(){\n    FilterRegistrationBean<RequestResponseLoggingFilter> registrationBean \n      = new FilterRegistrationBean<>();\n        \n    registrationBean.setFilter(new RequestResponseLoggingFilter());\n    registrationBean.addUrlPatterns(\"/users/*\");\n        \n    return registrationBean;    \n}\n```\n\n## 4. Spring Security 中的配置\n\n引入 spring.security后，以上方式都会失效，需要增加配置\n\n```java\n@Configuration\nclass SecurityConfig : WebSecurityConfigurerAdapter() {\n    override fun configure(http: HttpSecurity?) {\n        http?.cors()\n    }\n}\n```\n\n或者与corsConfigurationSource配合\n\n```java\n@Bean\nfun corsConfigurationSource(): CorsConfigurationSource {\n    val configuration = CorsConfiguration()\n    configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n    val source = UrlBasedCorsConfigurationSource()\n    source.registerCorsConfiguration(\"/hello\", configuration)\n    return source\n}\n```\n\n\n# 区别 \n\n**handler ->\ninterceptor ->\nDispatch Servlet ->\nFilter ->\nWeb Container ->\nClient**\n---\n\n\n- 实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效\n\n- 注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效\n\n- 引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行\n\n- HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证\n\n- HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的\n\n- 在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应\n\n[Reference详解](https://segmentfault.com/a/1190000019485883)","source":"_posts/Spring-Cors以及Filter和Interceptor.md","raw":"---\ntitle: '#Spring Cors以及Filter和Interceptor'\ndate: 2021-09-01 11:35:41\ntags:\n---\n\n# Cors 在spring中配置方法\n\n## 1. @CrossOrigin 注解\n\n```java\n@RestController\nclass HelloController {\n    @GetMapping(\"hello\")\n    @CrossOrigin(origins = [\"http://localhost:8080\"]) #针对方法handler\n    fun hello(): String {\n        return \"Hello, CORS!\"\n    }\n}\n```\n\n## 2. 实现 WebMvcConfigurer.addCorsMappings 方法\n\n增加全局配置\n```java\n@Configuration\n@EnableWebMvc\nclass MvcConfig: WebMvcConfigurer {\n    override fun addCorsMappings(registry: CorsRegistry) {\n        registry.addMapping(\"/hello\")\n                .allowedOrigins(\"http://localhost:8080\")\n    }\n}\n```\n\n此种方法使用了CorsRegistry 和 CorsRegistration\n\n## 3. 注入 CorsFilter\n\n```java\n@Configuration\nclass CORSConfiguration {\n    @Bean\n    fun corsFilter(): CorsFilter {\n        val configuration = CorsConfiguration()\n        configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n        val source = UrlBasedCorsConfigurationSource()\n        source.registerCorsConfiguration(\"/hello\", configuration)\n        return CorsFilter(source)\n    }\n}\n```\n\n也可以实现FilterRegistrationBean\n```java\n@Bean\npublic FilterRegistrationBean<RequestResponseLoggingFilter> loggingFilter(){\n    FilterRegistrationBean<RequestResponseLoggingFilter> registrationBean \n      = new FilterRegistrationBean<>();\n        \n    registrationBean.setFilter(new RequestResponseLoggingFilter());\n    registrationBean.addUrlPatterns(\"/users/*\");\n        \n    return registrationBean;    \n}\n```\n\n## 4. Spring Security 中的配置\n\n引入 spring.security后，以上方式都会失效，需要增加配置\n\n```java\n@Configuration\nclass SecurityConfig : WebSecurityConfigurerAdapter() {\n    override fun configure(http: HttpSecurity?) {\n        http?.cors()\n    }\n}\n```\n\n或者与corsConfigurationSource配合\n\n```java\n@Bean\nfun corsConfigurationSource(): CorsConfigurationSource {\n    val configuration = CorsConfiguration()\n    configuration.allowedOrigins = listOf(\"http://localhost:8080\")\n    val source = UrlBasedCorsConfigurationSource()\n    source.registerCorsConfiguration(\"/hello\", configuration)\n    return source\n}\n```\n\n\n# 区别 \n\n**handler ->\ninterceptor ->\nDispatch Servlet ->\nFilter ->\nWeb Container ->\nClient**\n---\n\n\n- 实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效\n\n- 注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效\n\n- 引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行\n\n- HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证\n\n- HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的\n\n- 在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应\n\n[Reference详解](https://segmentfault.com/a/1190000019485883)","slug":"Spring-Cors以及Filter和Interceptor","published":1,"updated":"2021-09-01T08:18:43.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt2bd1pq00027ch5g7rp6aw1","content":"<h1 id=\"Cors-在spring中配置方法\"><a href=\"#Cors-在spring中配置方法\" class=\"headerlink\" title=\"Cors 在spring中配置方法\"></a>Cors 在spring中配置方法</h1><h2 id=\"1-CrossOrigin-注解\"><a href=\"#1-CrossOrigin-注解\" class=\"headerlink\" title=\"1. @CrossOrigin 注解\"></a>1. @CrossOrigin 注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = [&quot;http://localhost:8080&quot;])</span> #针对方法<span class=\"function\">handler</span></span><br><span class=\"line\"><span class=\"function\">    fun <span class=\"title\">hello</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CORS!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-实现-WebMvcConfigurer-addCorsMappings-方法\"><a href=\"#2-实现-WebMvcConfigurer-addCorsMappings-方法\" class=\"headerlink\" title=\"2. 实现 WebMvcConfigurer.addCorsMappings 方法\"></a>2. 实现 WebMvcConfigurer.addCorsMappings 方法</h2><p>增加全局配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfig</span>: <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">addCorsMappings</span><span class=\"params\">(registry: CorsRegistry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此种方法使用了CorsRegistry 和 CorsRegistration</p>\n<h2 id=\"3-注入-CorsFilter\"><a href=\"#3-注入-CorsFilter\" class=\"headerlink\" title=\"3. 注入 CorsFilter\"></a>3. 注入 CorsFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CORSConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">corsFilter</span><span class=\"params\">()</span>: CorsFilter </span>&#123;</span><br><span class=\"line\">        val configuration = CorsConfiguration()</span><br><span class=\"line\">        configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">        val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CorsFilter(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以实现FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; <span class=\"title\">loggingFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; registrationBean </span><br><span class=\"line\">      = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> RequestResponseLoggingFilter());</span><br><span class=\"line\">    registrationBean.addUrlPatterns(<span class=\"string\">&quot;/users/*&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Spring-Security-中的配置\"><a href=\"#4-Spring-Security-中的配置\" class=\"headerlink\" title=\"4. Spring Security 中的配置\"></a>4. Spring Security 中的配置</h2><p>引入 spring.security后，以上方式都会失效，需要增加配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> : <span class=\"title\">WebSecurityConfigurerAdapter</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">configure</span><span class=\"params\">(http: HttpSecurity?)</span> </span>&#123;</span><br><span class=\"line\">        http?.cors()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者与corsConfigurationSource配合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">corsConfigurationSource</span><span class=\"params\">()</span>: CorsConfigurationSource </span>&#123;</span><br><span class=\"line\">    val configuration = CorsConfiguration()</span><br><span class=\"line\">    configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><strong>handler -&gt;<br>interceptor -&gt;<br>Dispatch Servlet -&gt;<br>Filter -&gt;<br>Web Container -&gt;<br>Client</strong></p>\n<hr>\n<ul>\n<li><p>实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效</p>\n</li>\n<li><p>注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效</p>\n</li>\n<li><p>引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行</p>\n</li>\n<li><p>HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证</p>\n</li>\n<li><p>HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的</p>\n</li>\n<li><p>在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应</p>\n</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000019485883\">Reference详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Cors-在spring中配置方法\"><a href=\"#Cors-在spring中配置方法\" class=\"headerlink\" title=\"Cors 在spring中配置方法\"></a>Cors 在spring中配置方法</h1><h2 id=\"1-CrossOrigin-注解\"><a href=\"#1-CrossOrigin-注解\" class=\"headerlink\" title=\"1. @CrossOrigin 注解\"></a>1. @CrossOrigin 注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@CrossOrigin(origins = [&quot;http://localhost:8080&quot;])</span> #针对方法<span class=\"function\">handler</span></span><br><span class=\"line\"><span class=\"function\">    fun <span class=\"title\">hello</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello, CORS!&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-实现-WebMvcConfigurer-addCorsMappings-方法\"><a href=\"#2-实现-WebMvcConfigurer-addCorsMappings-方法\" class=\"headerlink\" title=\"2. 实现 WebMvcConfigurer.addCorsMappings 方法\"></a>2. 实现 WebMvcConfigurer.addCorsMappings 方法</h2><p>增加全局配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MvcConfig</span>: <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">addCorsMappings</span><span class=\"params\">(registry: CorsRegistry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addMapping(<span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">                .allowedOrigins(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此种方法使用了CorsRegistry 和 CorsRegistration</p>\n<h2 id=\"3-注入-CorsFilter\"><a href=\"#3-注入-CorsFilter\" class=\"headerlink\" title=\"3. 注入 CorsFilter\"></a>3. 注入 CorsFilter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CORSConfiguration</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">corsFilter</span><span class=\"params\">()</span>: CorsFilter </span>&#123;</span><br><span class=\"line\">        val configuration = CorsConfiguration()</span><br><span class=\"line\">        configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">        val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">        source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CorsFilter(source)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也可以实现FilterRegistrationBean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; <span class=\"title\">loggingFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;RequestResponseLoggingFilter&gt; registrationBean </span><br><span class=\"line\">      = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">    registrationBean.setFilter(<span class=\"keyword\">new</span> RequestResponseLoggingFilter());</span><br><span class=\"line\">    registrationBean.addUrlPatterns(<span class=\"string\">&quot;/users/*&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> registrationBean;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Spring-Security-中的配置\"><a href=\"#4-Spring-Security-中的配置\" class=\"headerlink\" title=\"4. Spring Security 中的配置\"></a>4. Spring Security 中的配置</h2><p>引入 spring.security后，以上方式都会失效，需要增加配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityConfig</span> : <span class=\"title\">WebSecurityConfigurerAdapter</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">configure</span><span class=\"params\">(http: HttpSecurity?)</span> </span>&#123;</span><br><span class=\"line\">        http?.cors()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>或者与corsConfigurationSource配合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">corsConfigurationSource</span><span class=\"params\">()</span>: CorsConfigurationSource </span>&#123;</span><br><span class=\"line\">    val configuration = CorsConfiguration()</span><br><span class=\"line\">    configuration.allowedOrigins = listOf(<span class=\"string\">&quot;http://localhost:8080&quot;</span>)</span><br><span class=\"line\">    val source = UrlBasedCorsConfigurationSource()</span><br><span class=\"line\">    source.registerCorsConfiguration(<span class=\"string\">&quot;/hello&quot;</span>, configuration)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h1><p><strong>handler -&gt;<br>interceptor -&gt;<br>Dispatch Servlet -&gt;<br>Filter -&gt;<br>Web Container -&gt;<br>Client</strong></p>\n<hr>\n<ul>\n<li><p>实现 WebMvcConfigurer.addCorsMappings 方法来进行的 CORS 配置，最后会在 Spring 的 Interceptor 或 Handler 中生效</p>\n</li>\n<li><p>注入 CorsFilter 的方式会让 CORS 验证在 Filter 中生效</p>\n</li>\n<li><p>引入 Spring Security 后，需要调用 HttpSecurity.cors 方法以保证 CorsFilter 会在身份验证相关的 Filter 之前执行</p>\n</li>\n<li><p>HttpSecurity.cors + WebMvcConfigurer.addCorsMappings 是一种相对低效的方式，会导致跨域请求分别在 Filter 和 Interceptor 层各经历一次 CORS 验证</p>\n</li>\n<li><p>HttpSecurity.cors + 注册 CorsFilter 与 HttpSecurity.cors + 注册 CorsConfigurationSource 在运行的时候是等效的</p>\n</li>\n<li><p>在 Spring 中，没有通过 CORS 验证的请求会得到状态码为 403 的响应</p>\n</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000019485883\">Reference详解</a></p>\n"},{"title":"First Article","date":"2021-08-31T01:46:37.000Z","_content":"\n# 康奈尔笔记\n---\n\n- 记录 - 论据，概念，内容\n- 简化 - 概括 在 副栏\n- 背诵 - 记忆 关键词\n\n- 思考 - 提纲，摘要，归类，感想 - 单独记录\n- 复习 - 总结回顾\n---\n![note image](http://img.mp.itc.cn/upload/20170311/67a340a855e043529d997ae1adb3bc03_th.jpeg)\n\n---\n\n\n\n\n","source":"_posts/First-Article.md","raw":"---\ntitle: First Article\ndate: 2021-08-31 09:46:37\ntags:\n---\n\n# 康奈尔笔记\n---\n\n- 记录 - 论据，概念，内容\n- 简化 - 概括 在 副栏\n- 背诵 - 记忆 关键词\n\n- 思考 - 提纲，摘要，归类，感想 - 单独记录\n- 复习 - 总结回顾\n---\n![note image](http://img.mp.itc.cn/upload/20170311/67a340a855e043529d997ae1adb3bc03_th.jpeg)\n\n---\n\n\n\n\n","slug":"First-Article","published":1,"updated":"2021-09-02T02:49:12.764Z","_id":"ckt2bd1pr00037ch57hyz0zt9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"康奈尔笔记\"><a href=\"#康奈尔笔记\" class=\"headerlink\" title=\"康奈尔笔记\"></a>康奈尔笔记</h1><hr>\n<ul>\n<li><p>记录 - 论据，概念，内容</p>\n</li>\n<li><p>简化 - 概括 在 副栏</p>\n</li>\n<li><p>背诵 - 记忆 关键词</p>\n</li>\n<li><p>思考 - 提纲，摘要，归类，感想 - 单独记录</p>\n</li>\n<li><p>复习 - 总结回顾</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"http://img.mp.itc.cn/upload/20170311/67a340a855e043529d997ae1adb3bc03_th.jpeg\" alt=\"note image\"></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"康奈尔笔记\"><a href=\"#康奈尔笔记\" class=\"headerlink\" title=\"康奈尔笔记\"></a>康奈尔笔记</h1><hr>\n<ul>\n<li><p>记录 - 论据，概念，内容</p>\n</li>\n<li><p>简化 - 概括 在 副栏</p>\n</li>\n<li><p>背诵 - 记忆 关键词</p>\n</li>\n<li><p>思考 - 提纲，摘要，归类，感想 - 单独记录</p>\n</li>\n<li><p>复习 - 总结回顾</p>\n</li>\n</ul>\n<hr>\n<p><img src=\"http://img.mp.itc.cn/upload/20170311/67a340a855e043529d997ae1adb3bc03_th.jpeg\" alt=\"note image\"></p>\n<hr>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-08-31T01:39:21.819Z","updated":"2021-08-31T01:39:21.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt2bd1ps00047ch561ft9spl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}